module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = function(s) {
            return {
              'statement': (_.isOkay(s) ? s : [])
            };
          },
        peg$c2 = { type: "other", description: "Expression" },
        peg$c3 = peg$FAILED,
        peg$c4 = function(t) { return t; },
        peg$c5 = function(l, o, r) {
            return {
              'type': 'expression',
              'format': 'binary',
              'variant': 'operation',
              'operation': _.key(o),
              'left': l,
              'right': r,
              'modifier': null
            };
          },
        peg$c6 = function(n) { return n; },
        peg$c7 = function(o, e) {
            return {
              'type': 'expression',
              'format': 'unary',
              'variant': 'logical', // or { 'format': 'unary' }
              'expression': e,
              'modifier': o // TODO: could be { 'operator': o }
            };
          },
        peg$c8 = function(e, a) {
            return {
              'type': 'expression',
              'format': 'unary',
              'variant': 'cast',
              'expression': e,
              'modifier': a
            };
          },
        peg$c9 = function(d) { return d; },
        peg$c10 = null,
        peg$c11 = function(e) {
            return {
              'type': 'expression',
              'format': 'unary',
              'variant': 'select',
              'expression': e,
              'modifier': _.compose([n, x])
            };
          },
        peg$c12 = function(e, w, s) {
            // TODO: Not sure about this
            return {
              'type': 'expression',
              'format': 'binary',
              'variant': 'case',
              'case': e,
              'expression': _.compose([w, s], []),
              'modifier': null
            };
          },
        peg$c13 = function(w, t) {
            return {
              'type': 'condition',
              'format': 'when',
              'condition': w,
              'expression': t,
              'modifier': null
            };
          },
        peg$c14 = function(e) {
            return {
              'type': 'condition',
              'format': 'else',
              'expression': e,
              'modifier': null
            };
          },
        peg$c15 = function(a) {
            return {
              'type': 'expression',
              'format': 'unary',
              'variant': 'raise',
              'expression': a,
              'modifier': null
            };
          },
        peg$c16 = function(f) { return _.textNode(f); },
        peg$c17 = function(f, m) { return _.textNode(f) + ', \'' + m + '\''; },
        peg$c18 = function(v, n) {
            return {
              'type': 'expression',
              'format': 'unary',
              'variant': 'collate',
              'expression': v,
              'modifier': {
                'type': 'name',
                'name': n // TODO: could also be { 'name': n }
              }
            };
          },
        peg$c19 = function(v, n, m, e, x) {
            return {
              'type': 'expression',
              'format': 'binary',
              'variant': 'operation',
              'operation': _.key(_.compose([n, m])),
              'left': v,
              'right': e,
              'modifier': x
            };
          },
        peg$c20 = function(e) {
            return {
              'type': 'escape',
              'expression': e
            };
          },
        peg$c21 = function(v, n) {
            return {
              'type': 'expression',
              'format': 'unary',
              'variant': 'null',
              'expression': v,
              'modifier': n
            };
          },
        peg$c22 = function(i, n) {
            return _.compose([i, n]);
          },
        peg$c23 = function(v, i, n, e) {
            return {
              'type': 'expression',
              'format': 'binary',
              'variant': 'operation',
              'operation': _.key(_.compose([i, n])),
              'left': v,
              'right': e,
              'modifier': null
            };
          },
        peg$c24 = function(v, n, b, e1, e2) {
            return {
              'type': 'expression',
              'format': 'binary',
              'variant': 'operation',
              'operation': _.key(_.compose([n, b])),
              'left': v,
              'right': {
                'type': 'range',
                'left': e1,
                'right': e2
              },
              'modifier': null
            };
          },
        peg$c25 = function(v, n, i, e) {
            return {
              'type': 'expression',
              'format': 'binary',
              'variant': 'operation',
              'operation': _.key(_.compose([n, i])),
              'left': v,
              'right': e,
              'modifier': null
            };
          },
        peg$c26 = function(e) { return e; },
        peg$c27 = { type: "other", description: "Type Definition" },
        peg$c28 = function(n, a) {
            return _.extend({
              'type': 'datatype',
              'format': n[0],
              'affinity': n[1],
              'args': [] // datatype definition arguments
            }, a);
          },
        peg$c29 = function(a1, a2) {
            return {
              'args': _.compose([a1, a2], [])
            };
          },
        peg$c30 = { type: "other", description: "Literal Value" },
        peg$c31 = function(n) {
            return {
              'type': 'literal',
              'variant': 'null',
              'value': _.textNode(n)
            };
          },
        peg$c32 = function(d) {
            return {
              'type': 'literal',
              'variant': 'date',
              'value': _.textNode(d)
            };
          },
        peg$c33 = function(s) {
            return {
              'type': 'literal',
              'variant': 'string',
              'value': _.textNode(s)
            };
          },
        peg$c34 = function(s) {
            /**
              * @note Unescaped the pairs of literal single quotation marks
              */
            return _.unescape(_.textNode(s));
          },
        peg$c35 = "''",
        peg$c36 = { type: "literal", value: "''", description: "\"''\"" },
        peg$c37 = /^[^']/,
        peg$c38 = { type: "class", value: "[^']", description: "[^']" },
        peg$c39 = /^[x]/i,
        peg$c40 = { type: "class", value: "[x]i", description: "[x]i" },
        peg$c41 = function(b) {
            return {
              'type': 'literal',
              'variant': 'blob',
              'value': _.textNode(b)
            };
          },
        peg$c42 = function(s) { return _.textNode(s); },
        peg$c43 = function(s, n) {
            if (_.isOkay(s)) {
              n['value'] = _.compose([s, n['value']]);
            }
            return n;
          },
        peg$c44 = function(d, e) {
            return {
              'type': 'literal',
              'variant': 'decimal',
              'value': _.compose([d, e], '')
            };
          },
        peg$c45 = function(f, b) { return _.compose([f, b], ''); },
        peg$c46 = function(t, d) { return _.compose([t, d], ''); },
        peg$c47 = "e",
        peg$c48 = { type: "literal", value: "E", description: "\"E\"" },
        peg$c49 = /^[+\-]/,
        peg$c50 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
        peg$c51 = function(e, s, d) { return _.compose([e, s, d], ''); },
        peg$c52 = "0x",
        peg$c53 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c54 = function(f, b) {
            return {
              'type': 'literal',
              'variant': 'hexidecimal',
              'value': _.compose([f, b], '')
            };
          },
        peg$c55 = /^[0-9a-f]/i,
        peg$c56 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
        peg$c57 = /^[0-9]/,
        peg$c58 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c59 = { type: "other", description: "Bind Parameter" },
        peg$c60 = /^[1-9]/,
        peg$c61 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c62 = function(q, id) {
            return {
              'type': 'variable',
              'format': 'numbered',
              'name': _.compose([q, id], '')
            };
          },
        peg$c63 = /^[:@]/,
        peg$c64 = { type: "class", value: "[:@]", description: "[:@]" },
        peg$c65 = function(s, name) {
            return {
              'type': 'variable',
              'format': 'named',
              'name': _.compose([s, name], '')
            };
          },
        peg$c66 = "$",
        peg$c67 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c68 = /^[:]/,
        peg$c69 = { type: "class", value: "[:]", description: "[:]" },
        peg$c70 = function(d, name, suffix) {
            return {
              'type': 'variable',
              'format': 'tcl',
              'name': _.compose([_.compose([d, name], ''), suffix])
            };
          },
        peg$c71 = void 0,
        peg$c72 = function(q1, n, q2) { return _.compose([q1, n, q2], ''); },
        peg$c73 = function(v, o, e) {
            return {
              'type': 'expression',
              'format': 'binary',
              'variant': 'operation',
              'operation': _.key(o),
              'left': v,
              'right': e,
              'modifier': null
            };
          },
        peg$c74 = function(c) { return _.textNode(c); },
        peg$c75 = { type: "other", description: "Expression List" },
        peg$c76 = function(f, rest) {
            return _.compose([f, rest], []);
          },
        peg$c77 = function(n, a) {
            return _.extend({
              'type': 'function',
              'name': n,
              'distinct': false,
              'args': []
            }, a);
          },
        peg$c78 = function(s) {
            return {
              'distinct': false,
              'args': [{
                'type': 'identifier',
                'variant': 'star',
                'name': s
              }]
            };
          },
        peg$c79 = function(d, e) {
            return {
              'distinct': _.isOkay(d),
              'args': e
            };
          },
        peg$c80 = { type: "other", description: "Error Message" },
        peg$c81 = { type: "other", description: "Statement" },
        peg$c82 = function(m, s) {
            return _.extend({
              'modifier': null
            }, m, s);
          },
        peg$c83 = function(e, q) {
            // TODO: Format?
            return {
              'modifier': {
                'type': _.key(e),
                'explain': 'query plan'
              }
            };
          },
        peg$c84 = function(b, s, e) {
            return {
              'type': 'statement',
              'variant': 'transaction',
              'statement': _.isOkay(s) ? s : [],
              'modifier': b
            };
          },
        peg$c85 = function(s) {
            // return {
            //   'type': 'statement',
            //   'variant': 'transaction',
            //   'action': 'commit'
            // };
            return _.key(s);
          },
        peg$c86 = function(s, m) {
            // TODO: Format
            // return {
            //   'type': 'statement',
            //   'variant': 'transaction',
            //   'action': _.key(s),
            //   'modifier': _.key(m)
            // };
            return _.key(m);
          },
        peg$c87 = function(s, n) {
            return {
              'type': 'statement',
              'variant': 'transaction',
              'action': _.key(s),
              'savepoint': n
            };
          },
        peg$c88 = function(s, n, e) {
            return {
              'type': 'statement',
              'variant': _.key(s)
            };
          },
        peg$c89 = function(s, n) {
            return {
              'action': _.key(s),
              'name': n
            };
          },
        peg$c90 = function(s, d) {
            return {
              'action': _.key(s),
              'definition': d
            };
          },
        peg$c91 = function(w, s) { return _.extend(s, w); },
        peg$c92 = { type: "other", description: "WITH Clause" },
        peg$c93 = function(r, f) {
            // TODO: final format
            return {
              'with': {
                'type': 'with',
                'recursive': isOkay(r),
                'expression': _.compose([f, r], [])
              }
            };
          },
        peg$c94 = { type: "other", description: "Table Expression" },
        peg$c95 = { type: "other", description: "SELECT Statement" },
        peg$c96 = function(s, o, l) {
            return _.extend(s, {
              'order': o,
              'limit': l
            });
          },
        peg$c97 = function(e, d) {
            return {
              'start': e,
              'offset': d
            };
          },
        peg$c98 = function(o, e) { return e; },
        peg$c99 = function(s, u) {
            if ( _.isOkay(u) ) {
              // TODO: compound query
            }
            return s;
          },
        peg$c100 = function(c, s) {
            // TODO: compound query
          },
        peg$c101 = function(s, f, w, g) {
            // TODO: Not final syntax!
            if (!_.isArray(f)) {
              if (!_.isOkay(f)) {
                f = [];
              } else {
                f = [f];
              }
            }
            return _.extend({
              'type': 'statement',
              'variant': 'select',
              'from': f,
              'where': w,
              'group': g
            }, s);
          },
        peg$c102 = function(d, t) {
            var mod = {};
            if (_.isOkay(d)) {
              mod[_.textNode(d).toLowerCase()] = true;
            }
            return _.extend({
              'result': t,
              'distinct': false,
              'all': false
            }, mod);
          },
        peg$c103 = function(f, r) {
            return _.compose([f, r], []);
          },
        peg$c104 = function(s) { return s; },
        peg$c105 = function(e) { return _.makeArray(e); },
        peg$c106 = function(e, h) {
            // TODO: format
            return {
              'expression': _.makeArray(e),
              'having': h
            };
          },
        peg$c107 = function(q, s) {
            return {
              'type': 'identifier',
              'variant': 'star',
              'name': _.compose([q, s], '')
            };
          },
        peg$c108 = function(n, s) { return _.compose([n, s], ''); },
        peg$c109 = function(e, a) {
            // TODO: format
            return _.extend(e, {
              'alias': a
            });
          },
        peg$c110 = function(f, t) { return _.compose([f, t], []); },
        peg$c111 = function(d, i) {
            return _.extend(d, {
              'index': i
            });
          },
        peg$c112 = function(n, a) {
            return _.extend(n, {
              'alias': a
            });
          },
        peg$c113 = function(i) {
            return {
              'type': 'index',
              'index': i
            };
          },
        peg$c114 = function(n) {
            return _.textNode(n);
          },
        peg$c115 = function(l) { return l; },
        peg$c116 = function(a, n) { return n; },
        peg$c117 = function(t, j) {
            // TODO: format
            return {
              'type': 'map',
              'variant': 'join',
              'source': t,
              'map': j
            };
          },
        peg$c118 = function(o, n, c) {
            // TODO: format
            return _.extend({
              'type': 'join',
              'variant': _.key(o),
              'source': n,
              'on': null,
              'using': null
            }, c);
          },
        peg$c119 = function(n, t, j) { return _.compose([n, t, j]); },
        peg$c120 = function(t, o) { return _.compose([t, o]); },
        peg$c121 = function(c) { return c; },
        peg$c122 = function(e) {
            return {
              'on': e
            };
          },
        peg$c123 = function(f, b) {
            return {
              'using': _.compose([f, b], [])
            };
          },
        peg$c124 = function(l) {
            // TODO: format
            return {
              'type': 'statement',
              'variant': 'select',
              'result': l,
              'from': null,
              'where': null,
              'group': null
            };
          },
        peg$c125 = function(f, b) {
            return _.compose([f, b], []);
          },
        peg$c126 = function(i) { return i; },
        peg$c127 = function(e, c, d) {
            // TODO: Not final format
            return {
              'direction': _.textNode(d) /*|| 'ASC'*/,
              'expression': e,
              'collate': c
            };
          },
        peg$c128 = { type: "other", description: "All Columns" },
        peg$c129 = function(k) { return k; },
        peg$c130 = { type: "other", description: "INSERT Statement" },
        peg$c131 = function(k, t, p) {
            // TODO: Not final syntax!
            return _.extend({
              'type': 'statement',
              'variant': 'insert',
              'into': null,
              'action': null,
              'or': null,
              'result': []
            }, k, t, p);
          },
        peg$c132 = function(a, m) {
            return _.extend({
              'action': _.key(a)
            }, m);
          },
        peg$c133 = function(a) {
            return {
              'action': _.key(a)
            };
          },
        peg$c134 = function(m) {
            return {
              'or': _.key(m)
            };
          },
        peg$c135 = function(id, cols) {
            return {
              'into': _.extend({
                'target': id,
                'columns': null
              }, cols)
            };
          },
        peg$c136 = function(f, b) {
            return {
              'columns': _.compose([f, b], [])
            };
          },
        peg$c137 = function(n) {
            return {
              'type': 'identifier',
              'variant': 'column',
              'name': n
            };
          },
        peg$c138 = function(r) {
            return {
              'result': r
            };
          },
        peg$c139 = function(r) { return r; },
        peg$c140 = function(f, b) { return _.compose([f, b], []); },
        peg$c141 = function(e) {
            return {
              'type': 'statement',
              'variant': 'values',
              'values': e
            };
          },
        peg$c142 = function(d, v) {
            return {
              'type': 'statement',
              'variant': 'default',
              'values': _.compose([d, v])
            };
          },
        peg$c143 = { type: "other", description: "Compound Operator" },
        peg$c144 = { type: "other", description: "Unary Operator" },
        peg$c145 = { type: "other", description: "Binary Operator" },
        peg$c146 = function(o) { return _.key(o); },
        peg$c147 = { type: "other", description: "Or" },
        peg$c148 = { type: "other", description: "Add" },
        peg$c149 = { type: "other", description: "Subtract" },
        peg$c150 = { type: "other", description: "Multiply" },
        peg$c151 = { type: "other", description: "Modulo" },
        peg$c152 = { type: "other", description: "Shift Left" },
        peg$c153 = { type: "other", description: "Shift Right" },
        peg$c154 = { type: "other", description: "Logical AND" },
        peg$c155 = { type: "other", description: "Logical OR" },
        peg$c156 = { type: "other", description: "Less Than" },
        peg$c157 = { type: "other", description: "Greater Than" },
        peg$c158 = { type: "other", description: "Less Than Or Equal" },
        peg$c159 = { type: "other", description: "Greater Than Or Equal" },
        peg$c160 = { type: "other", description: "Equal" },
        peg$c161 = { type: "other", description: "Not Equal" },
        peg$c162 = { type: "other", description: "IS" },
        peg$c163 = { type: "other", description: "Misc Binary Operator" },
        peg$c164 = function(n) {
            return {
              'type': 'identifier',
              'variant': 'database',
              'name': n
            };
          },
        peg$c165 = function(d, n) {
            return {
              'type': 'identifier',
              'variant': 'table',
              'name': _.compose([d, n], '')
            };
          },
        peg$c166 = function(n, d) { return _.compose([n, d], ''); },
        peg$c167 = function(d, t, n) {
            return {
              'type': 'identifier',
              'variant': 'column',
              'name': _.compose([d, t, n], '')
            };
          },
        peg$c168 = function(n) {
            return {
              'type': 'identifier',
              'variant': 'collation',
              'name': n
            };
          },
        peg$c169 = function(n) {
            return {
              'type': 'identifier',
              'variant': 'savepoint',
              'name': n
            };
          },
        peg$c170 = { type: "other", description: "Database Name" },
        peg$c171 = { type: "other", description: "Table Name" },
        peg$c172 = { type: "other", description: "Column Name" },
        peg$c173 = { type: "other", description: "Table Constraint Name" },
        peg$c174 = { type: "other", description: "Column Constraint Name" },
        peg$c175 = { type: "other", description: "Collation Name" },
        peg$c176 = { type: "other", description: "Index Name" },
        peg$c177 = { type: "other", description: "Function Name" },
        peg$c178 = function(t) { return [t, 'text']; },
        peg$c179 = function(t) { return [t, 'real']; },
        peg$c180 = function(t) { return [t, 'numeric']; },
        peg$c181 = function(t) { return [t, 'integer']; },
        peg$c182 = function(t) { return [t, 'none']; },
        peg$c183 = "n",
        peg$c184 = { type: "literal", value: "N", description: "\"N\"" },
        peg$c185 = "var",
        peg$c186 = { type: "literal", value: "VAR", description: "\"VAR\"" },
        peg$c187 = "char",
        peg$c188 = { type: "literal", value: "CHAR", description: "\"CHAR\"" },
        peg$c189 = "tiny",
        peg$c190 = { type: "literal", value: "TINY", description: "\"TINY\"" },
        peg$c191 = "medium",
        peg$c192 = { type: "literal", value: "MEDIUM", description: "\"MEDIUM\"" },
        peg$c193 = "long",
        peg$c194 = { type: "literal", value: "LONG", description: "\"LONG\"" },
        peg$c195 = "text",
        peg$c196 = { type: "literal", value: "TEXT", description: "\"TEXT\"" },
        peg$c197 = "clob",
        peg$c198 = { type: "literal", value: "CLOB", description: "\"CLOB\"" },
        peg$c199 = function(t) { return _.key(t); },
        peg$c200 = "double",
        peg$c201 = { type: "literal", value: "DOUBLE", description: "\"DOUBLE\"" },
        peg$c202 = "precision",
        peg$c203 = { type: "literal", value: "PRECISION", description: "\"PRECISION\"" },
        peg$c204 = "float",
        peg$c205 = { type: "literal", value: "FLOAT", description: "\"FLOAT\"" },
        peg$c206 = "real",
        peg$c207 = { type: "literal", value: "REAL", description: "\"REAL\"" },
        peg$c208 = "numeric",
        peg$c209 = { type: "literal", value: "NUMERIC", description: "\"NUMERIC\"" },
        peg$c210 = "decimal",
        peg$c211 = { type: "literal", value: "DECIMAL", description: "\"DECIMAL\"" },
        peg$c212 = "boolean",
        peg$c213 = { type: "literal", value: "BOOLEAN", description: "\"BOOLEAN\"" },
        peg$c214 = "date",
        peg$c215 = { type: "literal", value: "DATE", description: "\"DATE\"" },
        peg$c216 = "time",
        peg$c217 = { type: "literal", value: "TIME", description: "\"TIME\"" },
        peg$c218 = "stamp",
        peg$c219 = { type: "literal", value: "STAMP", description: "\"STAMP\"" },
        peg$c220 = "int",
        peg$c221 = { type: "literal", value: "INT", description: "\"INT\"" },
        peg$c222 = "2",
        peg$c223 = { type: "literal", value: "2", description: "\"2\"" },
        peg$c224 = "4",
        peg$c225 = { type: "literal", value: "4", description: "\"4\"" },
        peg$c226 = "8",
        peg$c227 = { type: "literal", value: "8", description: "\"8\"" },
        peg$c228 = "eger",
        peg$c229 = { type: "literal", value: "EGER", description: "\"EGER\"" },
        peg$c230 = "big",
        peg$c231 = { type: "literal", value: "BIG", description: "\"BIG\"" },
        peg$c232 = "small",
        peg$c233 = { type: "literal", value: "SMALL", description: "\"SMALL\"" },
        peg$c234 = "blob",
        peg$c235 = { type: "literal", value: "BLOB", description: "\"BLOB\"" },
        peg$c236 = { type: "other", description: "UPDATE Statement" },
        peg$c237 = function(u, s, f, t, w, o, l) {
            // TODO: Not final syntax!
            return _.extend({
              'type': 'statement',
              'variant': s,
              'into': t,
              'where': w,
              'set': [],
              'order': o,
              'limit': l
            }, u, f);
          },
        peg$c238 = function(s) { return _.key(s); },
        peg$c239 = function(t) {
            return {
              'or': _.key(t)
            };
          },
        peg$c240 = function(c) {
            return {
              'set': c
            };
          },
        peg$c241 = function(f, e) {
            return {
              'type': 'assignment',
              'target': f,
              'value': e
            };
          },
        peg$c242 = function(w) { return w; },
        peg$c243 = { type: "other", description: "DELETE Statement" },
        peg$c244 = function(u, s, t, w, o, l) {
            // TODO: Not final syntax!
            return _.extend({
              'type': 'statement',
              'variant': s,
              'from': t,
              'where': w,
              'order': o,
              'limit': l
            }, u);
          },
        peg$c245 = { type: "other", description: "CREATE Statement" },
        peg$c246 = { type: "other", description: "CREATE Index" },
        peg$c247 = { type: "other", description: "CREATE Table" },
        peg$c248 = function(tmp, ne, id, s) {
            return _.extend({
              'type': 'statement',
              'variant': 'create',
              'format': 'table',
              'temporary': _.isOkay(tmp),
              'target': id,
              'condition': null,
              'modifier': null,
              'definition': []
            }, s, ne);
          },
        peg$c249 = function(i, n, e) {
            return {
              'condition': _.key(_.compose([i, n, e]))
            };
          },
        peg$c250 = function(s, r) {
            return {
              'definition': s,
              'modifier': r
            };
          },
        peg$c251 = function(r) { return _.key(r); },
        peg$c252 = function(n, t, c) {
            return _.extend({
              'type': 'definition',
              'variant': 'column',
              'name': n,
              'definition': (_.isOkay(c) ? c : []),
              'datatype': null
            }, t);
          },
        peg$c253 = function(t) {
            return {
              'datatype': t
            };
          },
        peg$c254 = { type: "other", description: "Column Constraint" },
        peg$c255 = function(n, c) {
            return _.extend({
              'name': n
            }, c);
          },
        peg$c256 = function(f) {
            return _.extend({
              'variant': 'foreign key'
            }, f);
          },
        peg$c257 = function(p, d, c, a) {
            return _.extend(p, c, d, a);
          },
        peg$c258 = function(s) {
            return {
              'type': 'constraint',
              'variant': _.key(s),
              'conflict': null,
              'direction': null,
              'modififer': null,
              'autoIncrement': false
            };
          },
        peg$c259 = function(d) {
            return {
              'direction': _.key(d)
            };
          },
        peg$c260 = function(a) {
            return {
              'autoIncrement': true
            };
          },
        peg$c261 = function(s, c) {
            return _.extend({
              'type': 'constraint',
              'variant': s,
              'conflict': null
            }, c);
          },
        peg$c262 = function(s, v) {
            return {
              'type': 'constraint',
              'variant': _.key(s),
              'value': v
            };
          },
        peg$c263 = function(v) { return v; },
        peg$c264 = function(c) {
            return {
              'type': 'constraint',
              'variant': 'collate',
              'collate': c
            };
          },
        peg$c265 = function(n, c) {
            return _.extend({
              'type': 'constraint',
              'variant': 'table',
              'name': n,
              'expression': null,
              'result': []
            }, c);
          },
        peg$c266 = function(k, c, t) {
            return {
              'result': c,
              'expression': _.extend(k, t)
            };
          },
        peg$c267 = function(s) {
            return {
              'type': 'constraint',
              'variant': _.key(s),
              'conflict': null
            };
          },
        peg$c268 = { type: "other", description: "Indexed Column" },
        peg$c269 = function(e, c, d) {
            // TODO: Not final format
            return {
              'type': 'identifier',
              'variant': 'column',
              'format': 'indexed',
              'direction': _.key(d) /*|| "ASC"*/,
              'name': e,
              'collate': c
            };
          },
        peg$c270 = function(t) { return _.textNode(t); },
        peg$c271 = function(o, c, t) {
            return {
              'conflict': _.key(t)
            };
          },
        peg$c272 = function(k, c) {
            return {
              'format': _.key(k),
              'expression': c
            };
          },
        peg$c273 = function(k, l, c) {
            return {
              'expression': _.extend(k, c),
              'result': l
            };
          },
        peg$c274 = function(k) {
            return {
              'variant': _.key(k),
              'target': null,
              'columns': null,
              'action': null,
              'deferrable': null
            };
          },
        peg$c275 = function(r, a, d) {
            return _.extend({
              'type': 'constraint',
              'action': a,
              'deferrable': d
            }, r);
          },
        peg$c276 = function(t, c) {
            // TODO: FORMAT?
            return {
              'target': t,
              'columns': c
            };
          },
        peg$c277 = function(f, b) { return _.collect([f, b], []); },
        peg$c278 = function(a) { return a; },
        peg$c279 = function(m, a, n) {
            return {
              'type': 'action',
              'variant': _.key(m),
              'action': n
            };
          },
        peg$c280 = function(a) { return _.key(a); },
        peg$c281 = function(m, n) {
            return {
              'type': 'action',
              'variant': _.key(m),
              'action': n
            };
          },
        peg$c282 = function(n, d, i) { return _.collect([n, d, i]); },
        peg$c283 = function(s) {
            return {
              'result': s
            };
          },
        peg$c284 = { type: "other", description: "CREATE Trigger" },
        peg$c285 = { type: "other", description: "CREATE View" },
        peg$c286 = { type: "other", description: "CREATE Virtual Table" },
        peg$c287 = { type: "other", description: "DROP Table Statement" },
        peg$c288 = function(s, t, i, q) {
            return {
              'type': 'statement',
              'variant': s,
              'format': t,
              'target': q,
              'condition': i
            };
          },
        peg$c289 = function(i, e) { return _.key(_.compose([i, e])); },
        peg$c290 = /^[a-z0-9\-_]/i,
        peg$c291 = { type: "class", value: "[a-z0-9\\-_]i", description: "[a-z0-9\\-_]i" },
        peg$c292 = /^[a-z0-9\-_ ]/i,
        peg$c293 = { type: "class", value: "[a-z0-9\\-_ ]i", description: "[a-z0-9\\-_ ]i" },
        peg$c294 = function(n) { return _.textNode(n); },
        peg$c295 = "\"",
        peg$c296 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c297 = "`",
        peg$c298 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c299 = { type: "other", description: "Open Bracket" },
        peg$c300 = "[",
        peg$c301 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c302 = { type: "other", description: "Close Bracket" },
        peg$c303 = "]",
        peg$c304 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c305 = { type: "other", description: "Open Parenthesis" },
        peg$c306 = "(",
        peg$c307 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c308 = { type: "other", description: "Close Parenthesis" },
        peg$c309 = ")",
        peg$c310 = { type: "literal", value: ")", description: "\")\"" },
        peg$c311 = { type: "other", description: "Comma" },
        peg$c312 = ",",
        peg$c313 = { type: "literal", value: ",", description: "\",\"" },
        peg$c314 = { type: "other", description: "Period" },
        peg$c315 = ".",
        peg$c316 = { type: "literal", value: ".", description: "\".\"" },
        peg$c317 = { type: "other", description: "Asterisk" },
        peg$c318 = "*",
        peg$c319 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c320 = { type: "other", description: "Question Mark" },
        peg$c321 = "?",
        peg$c322 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c323 = { type: "other", description: "Single Quote" },
        peg$c324 = "'",
        peg$c325 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c326 = { type: "other", description: "Double Quote" },
        peg$c327 = { type: "other", description: "Backtick" },
        peg$c328 = { type: "other", description: "Tilde" },
        peg$c329 = "~",
        peg$c330 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c331 = { type: "other", description: "Plus" },
        peg$c332 = "+",
        peg$c333 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c334 = { type: "other", description: "Minus" },
        peg$c335 = "-",
        peg$c336 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c337 = "=",
        peg$c338 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c339 = { type: "other", description: "Ampersand" },
        peg$c340 = "&",
        peg$c341 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c342 = { type: "other", description: "Pipe" },
        peg$c343 = "|",
        peg$c344 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c345 = "%",
        peg$c346 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c347 = "<",
        peg$c348 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c349 = ">",
        peg$c350 = { type: "literal", value: ">", description: "\">\"" },
        peg$c351 = { type: "other", description: "Exclamation" },
        peg$c352 = "!",
        peg$c353 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c354 = { type: "other", description: "Semicolon" },
        peg$c355 = ";",
        peg$c356 = { type: "literal", value: ";", description: "\";\"" },
        peg$c357 = { type: "other", description: "ABORT Keyword" },
        peg$c358 = "abort",
        peg$c359 = { type: "literal", value: "ABORT", description: "\"ABORT\"" },
        peg$c360 = { type: "other", description: "ACTION Keyword" },
        peg$c361 = "action",
        peg$c362 = { type: "literal", value: "ACTION", description: "\"ACTION\"" },
        peg$c363 = { type: "other", description: "ADD Keyword" },
        peg$c364 = "add",
        peg$c365 = { type: "literal", value: "ADD", description: "\"ADD\"" },
        peg$c366 = { type: "other", description: "AFTER Keyword" },
        peg$c367 = "after",
        peg$c368 = { type: "literal", value: "AFTER", description: "\"AFTER\"" },
        peg$c369 = { type: "other", description: "ALL Keyword" },
        peg$c370 = "all",
        peg$c371 = { type: "literal", value: "ALL", description: "\"ALL\"" },
        peg$c372 = { type: "other", description: "ALTER Keyword" },
        peg$c373 = "alter",
        peg$c374 = { type: "literal", value: "ALTER", description: "\"ALTER\"" },
        peg$c375 = { type: "other", description: "ANALYZE Keyword" },
        peg$c376 = "analyze",
        peg$c377 = { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
        peg$c378 = { type: "other", description: "AND Keyword" },
        peg$c379 = "and",
        peg$c380 = { type: "literal", value: "AND", description: "\"AND\"" },
        peg$c381 = { type: "other", description: "AS Keyword" },
        peg$c382 = "as",
        peg$c383 = { type: "literal", value: "AS", description: "\"AS\"" },
        peg$c384 = { type: "other", description: "ASC Keyword" },
        peg$c385 = "asc",
        peg$c386 = { type: "literal", value: "ASC", description: "\"ASC\"" },
        peg$c387 = { type: "other", description: "ATTACH Keyword" },
        peg$c388 = "attach",
        peg$c389 = { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
        peg$c390 = { type: "other", description: "AUTOINCREMENT Keyword" },
        peg$c391 = "autoincrement",
        peg$c392 = { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
        peg$c393 = { type: "other", description: "BEFORE Keyword" },
        peg$c394 = "before",
        peg$c395 = { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
        peg$c396 = { type: "other", description: "BEGIN Keyword" },
        peg$c397 = "begin",
        peg$c398 = { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
        peg$c399 = { type: "other", description: "BETWEEN Keyword" },
        peg$c400 = "between",
        peg$c401 = { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
        peg$c402 = { type: "other", description: "BY Keyword" },
        peg$c403 = "by",
        peg$c404 = { type: "literal", value: "BY", description: "\"BY\"" },
        peg$c405 = { type: "other", description: "CASCADE Keyword" },
        peg$c406 = "cascade",
        peg$c407 = { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
        peg$c408 = { type: "other", description: "CASE Keyword" },
        peg$c409 = "case",
        peg$c410 = { type: "literal", value: "CASE", description: "\"CASE\"" },
        peg$c411 = { type: "other", description: "CAST Keyword" },
        peg$c412 = "cast",
        peg$c413 = { type: "literal", value: "CAST", description: "\"CAST\"" },
        peg$c414 = { type: "other", description: "CHECK Keyword" },
        peg$c415 = "check",
        peg$c416 = { type: "literal", value: "CHECK", description: "\"CHECK\"" },
        peg$c417 = { type: "other", description: "COLLATE Keyword" },
        peg$c418 = "collate",
        peg$c419 = { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
        peg$c420 = { type: "other", description: "COLUMN Keyword" },
        peg$c421 = "column",
        peg$c422 = { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
        peg$c423 = { type: "other", description: "COMMIT Keyword" },
        peg$c424 = "commit",
        peg$c425 = { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
        peg$c426 = { type: "other", description: "CONFLICT Keyword" },
        peg$c427 = "conflict",
        peg$c428 = { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
        peg$c429 = { type: "other", description: "CONSTRAINT Keyword" },
        peg$c430 = "constraint",
        peg$c431 = { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
        peg$c432 = { type: "other", description: "CREATE Keyword" },
        peg$c433 = "create",
        peg$c434 = { type: "literal", value: "CREATE", description: "\"CREATE\"" },
        peg$c435 = { type: "other", description: "CROSS Keyword" },
        peg$c436 = "cross",
        peg$c437 = { type: "literal", value: "CROSS", description: "\"CROSS\"" },
        peg$c438 = { type: "other", description: "CURRENT_DATE Keyword" },
        peg$c439 = "current_date",
        peg$c440 = { type: "literal", value: "CURRENT_DATE", description: "\"CURRENT_DATE\"" },
        peg$c441 = { type: "other", description: "CURRENT_TIME Keyword" },
        peg$c442 = "current_time",
        peg$c443 = { type: "literal", value: "CURRENT_TIME", description: "\"CURRENT_TIME\"" },
        peg$c444 = { type: "other", description: "CURRENT_TIMESTAMP Keyword" },
        peg$c445 = "current_timestamp",
        peg$c446 = { type: "literal", value: "CURRENT_TIMESTAMP", description: "\"CURRENT_TIMESTAMP\"" },
        peg$c447 = { type: "other", description: "DATABASE Keyword" },
        peg$c448 = "database",
        peg$c449 = { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
        peg$c450 = { type: "other", description: "DEFAULT Keyword" },
        peg$c451 = "default",
        peg$c452 = { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
        peg$c453 = { type: "other", description: "DEFERRABLE Keyword" },
        peg$c454 = "deferrable",
        peg$c455 = { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
        peg$c456 = { type: "other", description: "DEFERRED Keyword" },
        peg$c457 = "deferred",
        peg$c458 = { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
        peg$c459 = { type: "other", description: "DELETE Keyword" },
        peg$c460 = "delete",
        peg$c461 = { type: "literal", value: "DELETE", description: "\"DELETE\"" },
        peg$c462 = { type: "other", description: "DESC Keyword" },
        peg$c463 = "desc",
        peg$c464 = { type: "literal", value: "DESC", description: "\"DESC\"" },
        peg$c465 = { type: "other", description: "DETACH Keyword" },
        peg$c466 = "detach",
        peg$c467 = { type: "literal", value: "DETACH", description: "\"DETACH\"" },
        peg$c468 = { type: "other", description: "DISTINCT Keyword" },
        peg$c469 = "distinct",
        peg$c470 = { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
        peg$c471 = { type: "other", description: "DROP Keyword" },
        peg$c472 = "drop",
        peg$c473 = { type: "literal", value: "DROP", description: "\"DROP\"" },
        peg$c474 = { type: "other", description: "EACH Keyword" },
        peg$c475 = "each",
        peg$c476 = { type: "literal", value: "EACH", description: "\"EACH\"" },
        peg$c477 = { type: "other", description: "ELSE Keyword" },
        peg$c478 = "else",
        peg$c479 = { type: "literal", value: "ELSE", description: "\"ELSE\"" },
        peg$c480 = { type: "other", description: "END Keyword" },
        peg$c481 = "end",
        peg$c482 = { type: "literal", value: "END", description: "\"END\"" },
        peg$c483 = { type: "other", description: "ESCAPE Keyword" },
        peg$c484 = "escape",
        peg$c485 = { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
        peg$c486 = { type: "other", description: "EXCEPT Keyword" },
        peg$c487 = "except",
        peg$c488 = { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
        peg$c489 = { type: "other", description: "EXCLUSIVE Keyword" },
        peg$c490 = "exclusive",
        peg$c491 = { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
        peg$c492 = { type: "other", description: "EXISTS Keyword" },
        peg$c493 = "exists",
        peg$c494 = { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
        peg$c495 = { type: "other", description: "EXPLAIN Keyword" },
        peg$c496 = "explain",
        peg$c497 = { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
        peg$c498 = { type: "other", description: "FAIL Keyword" },
        peg$c499 = "fail",
        peg$c500 = { type: "literal", value: "FAIL", description: "\"FAIL\"" },
        peg$c501 = { type: "other", description: "FOR Keyword" },
        peg$c502 = "for",
        peg$c503 = { type: "literal", value: "FOR", description: "\"FOR\"" },
        peg$c504 = { type: "other", description: "FOREIGN Keyword" },
        peg$c505 = "foreign",
        peg$c506 = { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
        peg$c507 = { type: "other", description: "FROM Keyword" },
        peg$c508 = "from",
        peg$c509 = { type: "literal", value: "FROM", description: "\"FROM\"" },
        peg$c510 = { type: "other", description: "FULL Keyword" },
        peg$c511 = "full",
        peg$c512 = { type: "literal", value: "FULL", description: "\"FULL\"" },
        peg$c513 = { type: "other", description: "GLOB Keyword" },
        peg$c514 = "glob",
        peg$c515 = { type: "literal", value: "GLOB", description: "\"GLOB\"" },
        peg$c516 = { type: "other", description: "GROUP Keyword" },
        peg$c517 = "group",
        peg$c518 = { type: "literal", value: "GROUP", description: "\"GROUP\"" },
        peg$c519 = { type: "other", description: "HAVING Keyword" },
        peg$c520 = "having",
        peg$c521 = { type: "literal", value: "HAVING", description: "\"HAVING\"" },
        peg$c522 = { type: "other", description: "IF Keyword" },
        peg$c523 = "if",
        peg$c524 = { type: "literal", value: "IF", description: "\"IF\"" },
        peg$c525 = { type: "other", description: "IGNORE Keyword" },
        peg$c526 = "ignore",
        peg$c527 = { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
        peg$c528 = { type: "other", description: "IMMEDIATE Keyword" },
        peg$c529 = "immediate",
        peg$c530 = { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
        peg$c531 = { type: "other", description: "IN Keyword" },
        peg$c532 = "in",
        peg$c533 = { type: "literal", value: "IN", description: "\"IN\"" },
        peg$c534 = { type: "other", description: "INDEX Keyword" },
        peg$c535 = "index",
        peg$c536 = { type: "literal", value: "INDEX", description: "\"INDEX\"" },
        peg$c537 = { type: "other", description: "INDEXED Keyword" },
        peg$c538 = "indexed",
        peg$c539 = { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
        peg$c540 = { type: "other", description: "INITIALLY Keyword" },
        peg$c541 = "initially",
        peg$c542 = { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
        peg$c543 = { type: "other", description: "INNER Keyword" },
        peg$c544 = "inner",
        peg$c545 = { type: "literal", value: "INNER", description: "\"INNER\"" },
        peg$c546 = { type: "other", description: "INSERT Keyword" },
        peg$c547 = "insert",
        peg$c548 = { type: "literal", value: "INSERT", description: "\"INSERT\"" },
        peg$c549 = { type: "other", description: "INSTEAD Keyword" },
        peg$c550 = "instead",
        peg$c551 = { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
        peg$c552 = { type: "other", description: "INTERSECT Keyword" },
        peg$c553 = "intersect",
        peg$c554 = { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
        peg$c555 = { type: "other", description: "INTO Keyword" },
        peg$c556 = "into",
        peg$c557 = { type: "literal", value: "INTO", description: "\"INTO\"" },
        peg$c558 = { type: "other", description: "IS Keyword" },
        peg$c559 = "is",
        peg$c560 = { type: "literal", value: "IS", description: "\"IS\"" },
        peg$c561 = { type: "other", description: "ISNULL Keyword" },
        peg$c562 = "isnull",
        peg$c563 = { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
        peg$c564 = { type: "other", description: "JOIN Keyword" },
        peg$c565 = "join",
        peg$c566 = { type: "literal", value: "JOIN", description: "\"JOIN\"" },
        peg$c567 = { type: "other", description: "KEY Keyword" },
        peg$c568 = "key",
        peg$c569 = { type: "literal", value: "KEY", description: "\"KEY\"" },
        peg$c570 = { type: "other", description: "LEFT Keyword" },
        peg$c571 = "left",
        peg$c572 = { type: "literal", value: "LEFT", description: "\"LEFT\"" },
        peg$c573 = { type: "other", description: "LIKE Keyword" },
        peg$c574 = "like",
        peg$c575 = { type: "literal", value: "LIKE", description: "\"LIKE\"" },
        peg$c576 = { type: "other", description: "LIMIT Keyword" },
        peg$c577 = "limit",
        peg$c578 = { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
        peg$c579 = { type: "other", description: "MATCH Keyword" },
        peg$c580 = "match",
        peg$c581 = { type: "literal", value: "MATCH", description: "\"MATCH\"" },
        peg$c582 = { type: "other", description: "NATURAL Keyword" },
        peg$c583 = "natural",
        peg$c584 = { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
        peg$c585 = { type: "other", description: "NO Keyword" },
        peg$c586 = "no",
        peg$c587 = { type: "literal", value: "NO", description: "\"NO\"" },
        peg$c588 = { type: "other", description: "NOT Keyword" },
        peg$c589 = "not",
        peg$c590 = { type: "literal", value: "NOT", description: "\"NOT\"" },
        peg$c591 = { type: "other", description: "NOTNULL Keyword" },
        peg$c592 = "notnull",
        peg$c593 = { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
        peg$c594 = { type: "other", description: "NULL Keyword" },
        peg$c595 = "null",
        peg$c596 = { type: "literal", value: "NULL", description: "\"NULL\"" },
        peg$c597 = { type: "other", description: "OF Keyword" },
        peg$c598 = "of",
        peg$c599 = { type: "literal", value: "OF", description: "\"OF\"" },
        peg$c600 = { type: "other", description: "OFFSET Keyword" },
        peg$c601 = "offset",
        peg$c602 = { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
        peg$c603 = { type: "other", description: "ON Keyword" },
        peg$c604 = "on",
        peg$c605 = { type: "literal", value: "ON", description: "\"ON\"" },
        peg$c606 = { type: "other", description: "OR Keyword" },
        peg$c607 = "or",
        peg$c608 = { type: "literal", value: "OR", description: "\"OR\"" },
        peg$c609 = { type: "other", description: "ORDER Keyword" },
        peg$c610 = "order",
        peg$c611 = { type: "literal", value: "ORDER", description: "\"ORDER\"" },
        peg$c612 = { type: "other", description: "OUTER Keyword" },
        peg$c613 = "outer",
        peg$c614 = { type: "literal", value: "OUTER", description: "\"OUTER\"" },
        peg$c615 = { type: "other", description: "PLAN Keyword" },
        peg$c616 = "plan",
        peg$c617 = { type: "literal", value: "PLAN", description: "\"PLAN\"" },
        peg$c618 = { type: "other", description: "PRAGMA Keyword" },
        peg$c619 = "pragma",
        peg$c620 = { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
        peg$c621 = { type: "other", description: "PRIMARY Keyword" },
        peg$c622 = "primary",
        peg$c623 = { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
        peg$c624 = { type: "other", description: "QUERY Keyword" },
        peg$c625 = "query",
        peg$c626 = { type: "literal", value: "QUERY", description: "\"QUERY\"" },
        peg$c627 = { type: "other", description: "RAISE Keyword" },
        peg$c628 = "raise",
        peg$c629 = { type: "literal", value: "RAISE", description: "\"RAISE\"" },
        peg$c630 = { type: "other", description: "RECURSIVE Keyword" },
        peg$c631 = "recursive",
        peg$c632 = { type: "literal", value: "RECURSIVE", description: "\"RECURSIVE\"" },
        peg$c633 = { type: "other", description: "REFERENCES Keyword" },
        peg$c634 = "references",
        peg$c635 = { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
        peg$c636 = { type: "other", description: "REGEXP Keyword" },
        peg$c637 = "regexp",
        peg$c638 = { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
        peg$c639 = { type: "other", description: "REINDEX Keyword" },
        peg$c640 = "reindex",
        peg$c641 = { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
        peg$c642 = { type: "other", description: "RELEASE Keyword" },
        peg$c643 = "release",
        peg$c644 = { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
        peg$c645 = { type: "other", description: "RENAME Keyword" },
        peg$c646 = "rename",
        peg$c647 = { type: "literal", value: "RENAME", description: "\"RENAME\"" },
        peg$c648 = { type: "other", description: "REPLACE Keyword" },
        peg$c649 = "replace",
        peg$c650 = { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
        peg$c651 = { type: "other", description: "RESTRICT Keyword" },
        peg$c652 = "restrict",
        peg$c653 = { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
        peg$c654 = { type: "other", description: "RIGHT Keyword" },
        peg$c655 = "right",
        peg$c656 = { type: "literal", value: "RIGHT", description: "\"RIGHT\"" },
        peg$c657 = { type: "other", description: "ROLLBACK Keyword" },
        peg$c658 = "rollback",
        peg$c659 = { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
        peg$c660 = { type: "other", description: "ROW Keyword" },
        peg$c661 = "row",
        peg$c662 = { type: "literal", value: "ROW", description: "\"ROW\"" },
        peg$c663 = { type: "other", description: "ROWID Keyword" },
        peg$c664 = "rowid",
        peg$c665 = { type: "literal", value: "ROWID", description: "\"ROWID\"" },
        peg$c666 = { type: "other", description: "SAVEPOINT Keyword" },
        peg$c667 = "savepoint",
        peg$c668 = { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
        peg$c669 = { type: "other", description: "SELECT Keyword" },
        peg$c670 = "select",
        peg$c671 = { type: "literal", value: "SELECT", description: "\"SELECT\"" },
        peg$c672 = { type: "other", description: "SET Keyword" },
        peg$c673 = "set",
        peg$c674 = { type: "literal", value: "SET", description: "\"SET\"" },
        peg$c675 = { type: "other", description: "TABLE Keyword" },
        peg$c676 = "table",
        peg$c677 = { type: "literal", value: "TABLE", description: "\"TABLE\"" },
        peg$c678 = { type: "other", description: "TEMP Keyword" },
        peg$c679 = "temp",
        peg$c680 = { type: "literal", value: "TEMP", description: "\"TEMP\"" },
        peg$c681 = { type: "other", description: "TEMPORARY Keyword" },
        peg$c682 = "temporary",
        peg$c683 = { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
        peg$c684 = { type: "other", description: "THEN Keyword" },
        peg$c685 = "then",
        peg$c686 = { type: "literal", value: "THEN", description: "\"THEN\"" },
        peg$c687 = { type: "other", description: "TO Keyword" },
        peg$c688 = "to",
        peg$c689 = { type: "literal", value: "TO", description: "\"TO\"" },
        peg$c690 = { type: "other", description: "TRANSACTION Keyword" },
        peg$c691 = "transaction",
        peg$c692 = { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
        peg$c693 = { type: "other", description: "TRIGGER Keyword" },
        peg$c694 = "trigger",
        peg$c695 = { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
        peg$c696 = { type: "other", description: "UNION Keyword" },
        peg$c697 = "union",
        peg$c698 = { type: "literal", value: "UNION", description: "\"UNION\"" },
        peg$c699 = { type: "other", description: "UNIQUE Keyword" },
        peg$c700 = "unique",
        peg$c701 = { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
        peg$c702 = { type: "other", description: "UPDATE Keyword" },
        peg$c703 = "update",
        peg$c704 = { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
        peg$c705 = { type: "other", description: "USING Keyword" },
        peg$c706 = "using",
        peg$c707 = { type: "literal", value: "USING", description: "\"USING\"" },
        peg$c708 = { type: "other", description: "VACUUM Keyword" },
        peg$c709 = "vacuum",
        peg$c710 = { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
        peg$c711 = { type: "other", description: "VALUES Keyword" },
        peg$c712 = "values",
        peg$c713 = { type: "literal", value: "VALUES", description: "\"VALUES\"" },
        peg$c714 = { type: "other", description: "VIEW Keyword" },
        peg$c715 = "view",
        peg$c716 = { type: "literal", value: "VIEW", description: "\"VIEW\"" },
        peg$c717 = { type: "other", description: "VIRTUAL Keyword" },
        peg$c718 = "virtual",
        peg$c719 = { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
        peg$c720 = { type: "other", description: "WHEN Keyword" },
        peg$c721 = "when",
        peg$c722 = { type: "literal", value: "WHEN", description: "\"WHEN\"" },
        peg$c723 = { type: "other", description: "WHERE Keyword" },
        peg$c724 = "where",
        peg$c725 = { type: "literal", value: "WHERE", description: "\"WHERE\"" },
        peg$c726 = { type: "other", description: "WITH Keyword" },
        peg$c727 = "with",
        peg$c728 = { type: "literal", value: "WITH", description: "\"WITH\"" },
        peg$c729 = { type: "other", description: "WITHOUT Keyword" },
        peg$c730 = "without",
        peg$c731 = { type: "literal", value: "WITHOUT", description: "\"WITHOUT\"" },
        peg$c732 = { type: "other", description: "Anything" },
        peg$c733 = { type: "any", description: "any character" },
        peg$c734 = { type: "other", description: "Optional Whitespace" },
        peg$c735 = { type: "other", description: "Enforced Whitespace" },
        peg$c736 = { type: "other", description: "Whitespace" },
        peg$c737 = /^[ \f\n\r\t\x0B]/,
        peg$c738 = { type: "class", value: "[ \\f\\n\\r\\t\\x0B]", description: "[ \\f\\n\\r\\t\\x0B]" },
        peg$c739 = "__TODO__",
        peg$c740 = { type: "literal", value: "__TODO__", description: "\"__TODO__\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsestmt();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsestmt();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseexpression() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseexpression_concat();
      if (s1 === peg$FAILED) {
        s1 = peg$parseexpression_types();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c4(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }

      return s0;
    }

    function peg$parseexpression_types() {
      var s0;

      s0 = peg$parseexpression_wrapped();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression_node();
        if (s0 === peg$FAILED) {
          s0 = peg$parseexpression_value();
        }
      }

      return s0;
    }

    function peg$parseexpression_concat() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpression_types();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebinary_loop_concat();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c5(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_wrapped() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesym_popen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression_node();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression_value();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesym_pclose();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c6(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_value() {
      var s0;

      s0 = peg$parseexpression_cast();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression_exists();
        if (s0 === peg$FAILED) {
          s0 = peg$parseexpression_case();
          if (s0 === peg$FAILED) {
            s0 = peg$parseexpression_raise();
            if (s0 === peg$FAILED) {
              s0 = peg$parseexpression_unary();
              if (s0 === peg$FAILED) {
                s0 = peg$parsebind_parameter();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsefunction_call();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseliteral_value();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseid_column();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseexpression_unary() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseoperator_unary();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c7(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_cast() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseCAST();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesym_popen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpression();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetype_alias();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseo();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesym_pclose();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c8(s4, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetype_alias() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetype_definition();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c9(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_exists() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseNOT();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsee();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c3;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c3;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$c10;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseEXISTS();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsee();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_select();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c11(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_case() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseCASE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseexpression_case_when();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseexpression_case_when();
                }
              } else {
                s5 = peg$c3;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseo();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexpression_case_else();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c10;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseo();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseEND();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseo();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c12(s3, s5, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_case_when() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseWHEN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseTHEN();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsee();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexpression();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseo();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c13(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_case_else() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseELSE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c14(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_raise() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseRAISE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_popen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpression_raise_args();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesym_pclose();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c15(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_raise_args() {
      var s0;

      s0 = peg$parseraise_args_ignore();
      if (s0 === peg$FAILED) {
        s0 = peg$parseraise_args_message();
      }

      return s0;
    }

    function peg$parseraise_args_ignore() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseIGNORE();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c16(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseraise_args_message() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseROLLBACK();
      if (s1 === peg$FAILED) {
        s1 = peg$parseABORT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseFAIL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesym_comma();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseerror_message();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c17(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_node() {
      var s0;

      s0 = peg$parseexpression_collate();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpression_compare();
        if (s0 === peg$FAILED) {
          s0 = peg$parseexpression_null();
          if (s0 === peg$FAILED) {
            s0 = peg$parseexpression_is();
            if (s0 === peg$FAILED) {
              s0 = peg$parseexpression_between();
              if (s0 === peg$FAILED) {
                s0 = peg$parseexpression_in();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseoperation_binary();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseexpression_collate() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpression_value();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOLLATE();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsename_collation();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c18(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_compare() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseexpression_value();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseNOT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLIKE();
            if (s4 === peg$FAILED) {
              s4 = peg$parseGLOB();
              if (s4 === peg$FAILED) {
                s4 = peg$parseREGEXP();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseMATCH();
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsee();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpression();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseo();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseexpression_escape();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c10;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c19(s1, s3, s4, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_escape() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseESCAPE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c20(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_null() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseexpression_value();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression_null_nodes();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c21(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_null_nodes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIS();
      if (s1 === peg$FAILED) {
        s1 = peg$parseNOT();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNULL();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c22(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_is() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseexpression_value();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseIS();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseNOT();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsee();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c23(s1, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_between() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseexpression_value();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseNOT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseBETWEEN();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsee();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseAND();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsee();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseexpression();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c24(s1, s3, s4, s5, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_in() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseexpression_value();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseNOT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseIN();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsee();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression_in_target();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c25(s1, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_in_target() {
      var s0;

      s0 = peg$parseexpression_list_or_select();
      if (s0 === peg$FAILED) {
        s0 = peg$parseid_table();
      }

      return s0;
    }

    function peg$parseexpression_list_or_select() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesym_popen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_select();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpression_list();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesym_pclose();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c26(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetype_definition() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsedatatype_types();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetype_definition_args();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c28(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }

      return s0;
    }

    function peg$parsetype_definition_args() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesym_popen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseliteral_number_signed();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsedefinition_args_loop();
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesym_pclose();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c29(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsedefinition_args_loop() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseliteral_number_signed();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c6(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseliteral_value() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseliteral_number();
      if (s0 === peg$FAILED) {
        s0 = peg$parseliteral_string();
        if (s0 === peg$FAILED) {
          s0 = peg$parseliteral_blob();
          if (s0 === peg$FAILED) {
            s0 = peg$parseliteral_null();
            if (s0 === peg$FAILED) {
              s0 = peg$parseliteral_date();
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }

      return s0;
    }

    function peg$parseliteral_null() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseNULL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c31(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseliteral_date() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCURRENT_DATE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseCURRENT_TIMESTAMP();
        if (s1 === peg$FAILED) {
          s1 = peg$parseCURRENT_TIME();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c32(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseliteral_string() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseliteral_string_single();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c33(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseliteral_string_single() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesym_sglquote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseliteral_string_schar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseliteral_string_schar();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesym_sglquote();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c34(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseliteral_string_schar() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c35) {
        s0 = peg$c35;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c37.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
      }

      return s0;
    }

    function peg$parseliteral_blob() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c39.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseliteral_string_single();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c41(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsenumber_sign() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsesym_plus();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesym_minus();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c42(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseliteral_number_signed() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsenumber_sign();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseliteral_number();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c43(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseliteral_number() {
      var s0;

      s0 = peg$parseliteral_number_decimal();
      if (s0 === peg$FAILED) {
        s0 = peg$parseliteral_number_hex();
      }

      return s0;
    }

    function peg$parseliteral_number_decimal() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsenumber_decimal_node();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber_decimal_exponent();
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c44(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsenumber_decimal_node() {
      var s0;

      s0 = peg$parsenumber_decimal_full();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber_decimal_fraction();
      }

      return s0;
    }

    function peg$parsenumber_decimal_full() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenumber_digit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsenumber_digit();
        }
      } else {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber_decimal_fraction();
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c45(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsenumber_decimal_fraction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesym_dot();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsenumber_digit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsenumber_digit();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c46(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsenumber_decimal_exponent() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c47) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c49.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsenumber_digit();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsenumber_digit();
            }
          } else {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c51(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseliteral_number_hex() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c52) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsenumber_hex();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsenumber_hex();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c54(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsenumber_hex() {
      var s0;

      if (peg$c55.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }

      return s0;
    }

    function peg$parsenumber_digit() {
      var s0;

      if (peg$c57.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }

      return s0;
    }

    function peg$parsebind_parameter() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsebind_parameter_numbered();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebind_parameter_named();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebind_parameter_tcl();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }

      return s0;
    }

    function peg$parsebind_parameter_numbered() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesym_quest();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c57.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c57.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c58); }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c3;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c3;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c62(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsebind_parameter_named() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c63.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsename_char();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsename_char();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c65(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsebind_parameter_tcl() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c66;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsename_char();
        if (s3 === peg$FAILED) {
          if (peg$c68.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsename_char();
            if (s3 === peg$FAILED) {
              if (peg$c68.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c69); }
              }
            }
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsebind_parameter_named_suffix();
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c70(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsebind_parameter_named_suffix() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesym_dblquote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsesym_dblquote();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c71;
        } else {
          peg$currPos = s4;
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseany();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parsesym_dblquote();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c71;
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseany();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesym_dblquote();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c72(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseoperation_binary() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpression_value();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoperator_binary();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression_types();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c73(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsebinary_loop_concat() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseAND();
      if (s1 === peg$FAILED) {
        s1 = peg$parseOR();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c74(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseexpression_list() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseexpression_list_rest();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseexpression_list_rest();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c76(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }

      return s0;
    }

    function peg$parseexpression_list_rest() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_comma();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c26(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsefunction_call() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsename_function();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_popen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunction_call_args();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesym_pclose();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c77(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsefunction_call_args() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseselect_star();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c78(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseDISTINCT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsee();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c10;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpression_list();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c79(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseerror_message() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseliteral_string();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }

      return s0;
    }

    function peg$parsestmt() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsestmt_modifier();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_nodes();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesym_semi();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c82(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }

      return s0;
    }

    function peg$parsestmt_modifier() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseEXPLAIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseQUERY();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsePLAN();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsee();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c3;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c3;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c83(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_nodes() {
      var s0;

      s0 = peg$parsestmt_crud();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestmt_create();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestmt_drop();
          if (s0 === peg$FAILED) {
            s0 = peg$parsestmt_transaction();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestmt_alter();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestmt_rollback();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsestmt_transaction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestmt_begin();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestmt();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsestmt();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_commit();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c84(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_commit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseCOMMIT();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEND();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseTRANSACTION();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c3;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c3;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c85(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_begin() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseDEFERRED();
          if (s4 === peg$FAILED) {
            s4 = peg$parseIMMEDIATE();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEXCLUSIVE();
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseTRANSACTION();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsee();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c86(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_rollback() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseROLLBACK();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseTRANSACTION();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserollback_savepoint();
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c87(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parserollback_savepoint() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseTO();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseSAVEPOINT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseid_savepoint();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsee();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c6(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_alter() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseALTER();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseTABLE();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseid_table();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsealter_action();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseo();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c88(s1, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsealter_action() {
      var s0;

      s0 = peg$parsealter_action_rename();
      if (s0 === peg$FAILED) {
        s0 = peg$parsealter_action_add();
      }

      return s0;
    }

    function peg$parsealter_action_rename() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseRENAME();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTO();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseid_table();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c89(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsealter_action_add() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseADD();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseCOLUMN();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesource_def_column();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c90(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_crud() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseclause_with();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_crud_types();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c91(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseclause_with() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseWITH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseRECURSIVE();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpression_table();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseo();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseclause_with_loop();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseclause_with_loop();
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c93(s6, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }

      return s0;
    }

    function peg$parseclause_with_loop() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression_table();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c26(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseexpression_table() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsename_table();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsesym_popen();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsename_column();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parsesym_comma();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsename_column();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c3;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c3;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parsesym_comma();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsename_column();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c3;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c3;
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesym_pclose();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c3;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c3;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAS();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsee();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsestmt_select();
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }

      return s0;
    }

    function peg$parsestmt_crud_types() {
      var s0;

      s0 = peg$parsestmt_select();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestmt_insert();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestmt_update();
          if (s0 === peg$FAILED) {
            s0 = peg$parsestmt_delete();
          }
        }
      }

      return s0;
    }

    function peg$parsestmt_select() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseselect_loop();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_core_order();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmt_core_limit();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c96(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      return s0;
    }

    function peg$parsestmt_core_order() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseORDER();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmt_core_order_list();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c9(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_core_limit() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLIMIT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmt_core_limit_offset();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c97(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_core_limit_offset() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseOFFSET();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parsesym_comma();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_loop() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseselect_parts();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseselect_loop_union();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseselect_loop_union();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c99(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_loop_union() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseoperator_compound();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselect_parts();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c100(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_parts() {
      var s0;

      s0 = peg$parseselect_parts_core();
      if (s0 === peg$FAILED) {
        s0 = peg$parseselect_parts_values();
      }

      return s0;
    }

    function peg$parseselect_parts_core() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseselect_core_select();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselect_core_from();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmt_core_where();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseo();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseselect_core_group();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c10;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseo();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c101(s1, s3, s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_core_select() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSELECT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDISTINCT();
          if (s3 === peg$FAILED) {
            s3 = peg$parseALL();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseselect_target();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c102(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_target() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseselect_node();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseselect_target_loop();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseselect_target_loop();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c103(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_target_loop() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselect_node();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c6(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_core_from() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFROM();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselect_source();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c104(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_core_where() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseWHERE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c105(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_core_group() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseGROUP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseselect_core_having();
                if (s6 === peg$FAILED) {
                  s6 = peg$c10;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c106(s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_core_having() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseHAVING();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c26(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_node() {
      var s0;

      s0 = peg$parseselect_node_star();
      if (s0 === peg$FAILED) {
        s0 = peg$parseselect_node_aliased();
      }

      return s0;
    }

    function peg$parseselect_node_star() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseselect_node_star_qualified();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselect_star();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c107(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_node_star_qualified() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsename_table();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_dot();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c108(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_node_aliased() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealias();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c109(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_source() {
      var s0;

      s0 = peg$parseselect_join_loop();
      if (s0 === peg$FAILED) {
        s0 = peg$parseselect_source_loop();
      }

      return s0;
    }

    function peg$parseselect_source_loop() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetable_or_sub();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsesource_loop_tail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesource_loop_tail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c110(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsesource_loop_tail() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetable_or_sub();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c4(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetable_or_sub() {
      var s0;

      s0 = peg$parsetable_or_sub_sub();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetable_qualified();
      }

      return s0;
    }

    function peg$parsetable_qualified() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsetable_qualified_id();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetable_or_sub_index();
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c111(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetable_qualified_id() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseid_table();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealias();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c112(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetable_or_sub_index() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetable_or_sub_index_node();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c113(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetable_or_sub_index_node() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseINDEXED();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsename_index();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseo();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c114(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseNOT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsee();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINDEXED();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseo();
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c3;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c3;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c114(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsetable_or_sub_sub() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesym_popen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselect_join_loop();
          if (s3 === peg$FAILED) {
            s3 = peg$parseselect_source_loop();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesym_pclose();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c115(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsealias() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseAS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c116(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_join_loop() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsetable_or_sub();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseselect_join_clause();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseselect_join_clause();
            }
          } else {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c117(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_join_clause() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsejoin_operator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetable_or_sub();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsejoin_condition();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c118(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsejoin_operator() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseNATURAL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsejoin_operator_types();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseJOIN();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsee();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c119(s1, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsejoin_operator_types() {
      var s0;

      s0 = peg$parseoperator_types_hand();
      if (s0 === peg$FAILED) {
        s0 = peg$parseoperator_types_misc();
      }

      return s0;
    }

    function peg$parseoperator_types_hand() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLEFT();
      if (s1 === peg$FAILED) {
        s1 = peg$parseRIGHT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseFULL();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetypes_hand_outer();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c120(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetypes_hand_outer() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOUTER();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c4(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseoperator_types_misc() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseINNER();
      if (s1 === peg$FAILED) {
        s1 = peg$parseCROSS();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c4(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsejoin_condition() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsejoin_condition_on();
      if (s1 === peg$FAILED) {
        s1 = peg$parsejoin_condition_using();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c121(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsejoin_condition_on() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseON();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c122(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsejoin_condition_using() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseUSING();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseid_column();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsejoin_condition_using_loop();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsejoin_condition_using_loop();
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c123(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsejoin_condition_using_loop() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseid_column();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c6(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_parts_values() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseVALUES();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinsert_values_list();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c124(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_core_order_list() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestmt_core_order_list_item();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_core_order_list_loop();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c125(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_core_order_list_loop() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestmt_core_order_list_item();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c126(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_core_order_list_item() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolumn_collate();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseprimary_column_dir();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c127(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseselect_star() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_star();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c128); }
      }

      return s0;
    }

    function peg$parsestmt_fallback_types() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseREPLACE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseROLLBACK();
        if (s1 === peg$FAILED) {
          s1 = peg$parseABORT();
          if (s1 === peg$FAILED) {
            s1 = peg$parseFAIL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseIGNORE();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c129(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestmt_insert() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseinsert_keyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinsert_target();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinsert_parts();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c131(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c130); }
      }

      return s0;
    }

    function peg$parseinsert_keyword() {
      var s0;

      s0 = peg$parseinsert_keyword_ins();
      if (s0 === peg$FAILED) {
        s0 = peg$parseinsert_keyword_repl();
      }

      return s0;
    }

    function peg$parseinsert_keyword_ins() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseINSERT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinsert_keyword_mod();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c132(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseinsert_keyword_repl() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseREPLACE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c133(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseinsert_keyword_mod() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_fallback_types();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c134(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseinsert_target() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseINTO();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseid_table();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseloop_columns();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c135(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseloop_columns() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesym_popen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseloop_name_column();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseloop_column_tail();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseloop_column_tail();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesym_pclose();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c136(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseloop_column_tail() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseloop_name_column();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c121(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseloop_name_column() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsename_column();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c137(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseinsert_parts() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseinsert_value();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestmt_select();
        if (s1 === peg$FAILED) {
          s1 = peg$parseinsert_default();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c138(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseinsert_value() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseVALUES();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinsert_values_list();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c139(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseinsert_values_list() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseinsert_values();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseinsert_values_loop();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseinsert_values_loop();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c140(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseinsert_values_loop() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinsert_values();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c26(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseinsert_values() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesym_popen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression_list();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesym_pclose();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c141(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseinsert_default() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDEFAULT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVALUES();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c142(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseoperator_compound() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseUNION();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseALL();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c3;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c3;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseINTERSECT();
        if (s0 === peg$FAILED) {
          s0 = peg$parseEXCEPT();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }

      return s0;
    }

    function peg$parseoperator_unary() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_tilde();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesym_minus();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesym_plus();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNOT();
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }

      return s0;
    }

    function peg$parseoperator_binary() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebinary_concat();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebinary_multiply();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebinary_mod();
          if (s1 === peg$FAILED) {
            s1 = peg$parsebinary_plus();
            if (s1 === peg$FAILED) {
              s1 = peg$parsebinary_minus();
              if (s1 === peg$FAILED) {
                s1 = peg$parsebinary_left();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsebinary_right();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsebinary_and();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsebinary_or();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parsebinary_lt();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsebinary_lte();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsebinary_gt();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsebinary_gte();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsebinary_lang();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parsebinary_notequal();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parsebinary_equal();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c146(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }

      return s0;
    }

    function peg$parsebinary_concat() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsesym_pipe();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_pipe();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }

      return s0;
    }

    function peg$parsebinary_plus() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_plus();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }

      return s0;
    }

    function peg$parsebinary_minus() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_minus();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }

      return s0;
    }

    function peg$parsebinary_multiply() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_star();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c150); }
      }

      return s0;
    }

    function peg$parsebinary_mod() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_mod();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }

      return s0;
    }

    function peg$parsebinary_left() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsesym_lt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_lt();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }

      return s0;
    }

    function peg$parsebinary_right() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsesym_gt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_gt();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }

      return s0;
    }

    function peg$parsebinary_and() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_amp();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c154); }
      }

      return s0;
    }

    function peg$parsebinary_or() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_pipe();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }

      return s0;
    }

    function peg$parsebinary_lt() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_lt();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }

      return s0;
    }

    function peg$parsebinary_gt() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsesym_gt();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }

      return s0;
    }

    function peg$parsebinary_lte() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsesym_lt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_equal();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }

      return s0;
    }

    function peg$parsebinary_gte() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsesym_gt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_equal();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }

      return s0;
    }

    function peg$parsebinary_equal() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsesym_equal();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_equal();
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c160); }
      }

      return s0;
    }

    function peg$parsebinary_notequal() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsesym_excl();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_equal();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesym_lt();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesym_gt();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }

      return s0;
    }

    function peg$parsebinary_lang() {
      var s0;

      s0 = peg$parsebinary_lang_isnt();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebinary_lang_misc();
      }

      return s0;
    }

    function peg$parsebinary_lang_isnt() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseIS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseNOT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsee();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c162); }
      }

      return s0;
    }

    function peg$parsebinary_lang_misc() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseIN();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLIKE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGLOB();
          if (s0 === peg$FAILED) {
            s0 = peg$parseMATCH();
            if (s0 === peg$FAILED) {
              s0 = peg$parseREGEXP();
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }

      return s0;
    }

    function peg$parseid_database() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsename_database();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c164(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseid_table() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseid_table_qualified();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename_table();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c165(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseid_table_qualified() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsename_database();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_dot();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c166(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseid_column() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseid_table_qualified();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseid_column_qualified();
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename_column();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c167(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseid_column_qualified() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsename_table();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_dot();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c46(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseid_collation() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsename_collation();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c168(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseid_savepoint() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c169(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsename_database() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsename();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c170); }
      }

      return s0;
    }

    function peg$parsename_table() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsename();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }

      return s0;
    }

    function peg$parsename_column() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsename();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c172); }
      }

      return s0;
    }

    function peg$parsename_constraint_table() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsename();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }

      return s0;
    }

    function peg$parsename_constraint_column() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsename();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c174); }
      }

      return s0;
    }

    function peg$parsename_collation() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsename();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }

      return s0;
    }

    function peg$parsename_index() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsename();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c176); }
      }

      return s0;
    }

    function peg$parsename_function() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsename();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }

      return s0;
    }

    function peg$parsedatatype_types() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedatatype_text();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c178(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedatatype_real();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c179(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsedatatype_numeric();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c180(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedatatype_integer();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c181(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsedatatype_none();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c182(s1);
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedatatype_text() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c183) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$c10;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c185) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c186); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c10;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c187) {
            s4 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c188); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c189) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c190); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c191) {
            s2 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c192); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c193) {
              s2 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c194); }
            }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c195) {
            s3 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c196); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c197) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c198); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c199(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedatatype_real() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c200) {
        s2 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c201); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsee();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c202) {
            s5 = input.substr(peg$currPos, 9);
            peg$currPos += 9;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c203); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c10;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c204) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c205); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c206) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c207); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c199(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedatatype_numeric() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c208) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c209); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c210) {
          s1 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c211); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c212) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c213); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c214) {
              s2 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c215); }
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c216) {
                s3 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c217); }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$c10;
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c3;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c3;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c216) {
                s2 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c217); }
              }
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c218) {
                  s3 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c219); }
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$c10;
                }
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c3;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c3;
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c199(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedatatype_integer() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c220) {
        s2 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 50) {
          s3 = peg$c222;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c223); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 52) {
            s3 = peg$c224;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c225); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 56) {
              s3 = peg$c226;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c227); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c228) {
                s3 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c229); }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c230) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c231); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c191) {
            s2 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c192); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c232) {
              s2 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c233); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c189) {
                s2 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c190); }
              }
            }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c220) {
            s3 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c221); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c199(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedatatype_none() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c234) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c235); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c199(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestmt_update() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseclause_with();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseupdate_start();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseupdate_fallback();
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetable_qualified();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseo();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseupdate_set();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseupdate_where();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c10;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseo();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestmt_core_order();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c10;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseo();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsestmt_core_limit();
                            if (s12 === peg$FAILED) {
                              s12 = peg$c10;
                            }
                            if (s12 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c237(s7, s3, s4, s5, s8, s10, s12);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c236); }
      }

      return s0;
    }

    function peg$parseupdate_start() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseUPDATE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c238(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseupdate_fallback() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseOR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_fallback_types();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c239(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseupdate_set() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseupdate_columns();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c240(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseupdate_columns() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseupdate_column();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseupdate_columns_tail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseupdate_columns_tail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c140(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseupdate_columns_tail() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesym_comma();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseupdate_column();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c121(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseupdate_column() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseid_column();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesym_equal();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpression_types();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseo();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c241(s1, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseupdate_where() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsestmt_core_where();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c242(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_delete() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseclause_with();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedelete_start();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetable_qualified();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsedelete_where();
                if (s6 === peg$FAILED) {
                  s6 = peg$c10;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseo();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsestmt_core_order();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c10;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseo();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestmt_core_limit();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c10;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c244(s1, s3, s4, s6, s8, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }

      return s0;
    }

    function peg$parsedelete_start() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDELETE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFROM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c238(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsedelete_where() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsestmt_core_where();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c242(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestmt_create() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsecreate_index();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecreate_table();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecreate_trigger();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecreate_view();
            if (s0 === peg$FAILED) {
              s0 = peg$parsecreate_virtual();
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c245); }
      }

      return s0;
    }

    function peg$parsecreate_index() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parse_TODO_();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c246); }
      }

      return s0;
    }

    function peg$parsecreate_table() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseCREATE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecreate_table_tmp();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTABLE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsee();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecreate_ine();
                if (s6 === peg$FAILED) {
                  s6 = peg$c10;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseid_table();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsee();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsecreate_table_source();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c248(s3, s6, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }

      return s0;
    }

    function peg$parsecreate_table_tmp() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTEMP();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTEMPORARY();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c199(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecreate_ine() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNOT();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEXISTS();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsee();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c249(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecreate_table_source() {
      var s0;

      s0 = peg$parsetable_source_def();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetable_source_select();
      }

      return s0;
    }

    function peg$parsetable_source_def() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesym_popen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesource_def_loop();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesym_pclose();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesource_def_rowid();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c250(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsesource_def_rowid() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseWITHOUT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseROWID();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c251(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsesource_def_loop() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsesource_def_types();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsesource_def_tail();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsesource_def_tail();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c140(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsesource_def_tail() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesource_def_types();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsesource_def_types() {
      var s0;

      s0 = peg$parsesource_def_column();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetable_constraint();
      }

      return s0;
    }

    function peg$parsesource_def_column() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsename_column();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolumn_type();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecolumn_constraints();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c252(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecolumn_type() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetype_definition();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c253(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecolumn_constraints() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsecolumn_constraint();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecolumn_constraint_tail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsecolumn_constraint_tail();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c140(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecolumn_constraint_tail() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolumn_constraint();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c121(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecolumn_constraint() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsecolumn_constraint_name();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolumn_constraint_types();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c255(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }

      return s0;
    }

    function peg$parsecolumn_constraint_name() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseCONSTRAINT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename_constraint_column();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c6(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecolumn_constraint_types() {
      var s0;

      s0 = peg$parsecolumn_constraint_primary();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecolumn_constraint_null();
        if (s0 === peg$FAILED) {
          s0 = peg$parseconstraint_check();
          if (s0 === peg$FAILED) {
            s0 = peg$parsecolumn_constraint_default();
            if (s0 === peg$FAILED) {
              s0 = peg$parsecolumn_constraint_collate();
              if (s0 === peg$FAILED) {
                s0 = peg$parsecolumn_constraint_foreign();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecolumn_constraint_foreign() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseforeign_clause();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c256(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecolumn_constraint_primary() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecol_primary_start();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecol_primary_dir();
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseprimary_conflict();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecol_primary_auto();
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseo();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c257(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecol_primary_start() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsePRIMARY();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseKEY();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c258(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecol_primary_dir() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseprimary_column_dir();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c259(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecol_primary_auto() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseAUTOINCREMENT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c260(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecolumn_constraint_null() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseconstraint_null_types();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprimary_conflict();
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c261(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseconstraint_null_types() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseNOT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNULL();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNIQUE();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c199(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecolumn_constraint_default() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDEFAULT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecol_default_val();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c262(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecol_default_val() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseo();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression_wrapped();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c263(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsee();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseliteral_number_signed();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c263(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsee();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseliteral_value();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        }
      }

      return s0;
    }

    function peg$parsecolumn_constraint_collate() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsecolumn_collate();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c264(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetable_constraint() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsetable_constraint_name();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetable_constraint_types();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c265(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetable_constraint_name() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCONSTRAINT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename_constraint_table();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c6(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetable_constraint_types() {
      var s0;

      s0 = peg$parsetable_constraint_primary();
      if (s0 === peg$FAILED) {
        s0 = peg$parseconstraint_check();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetable_constraint_foreign();
        }
      }

      return s0;
    }

    function peg$parsetable_constraint_primary() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseprimary_start();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseprimary_columns();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseprimary_conflict();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c266(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseprimary_start() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsePRIMARY();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseKEY();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseUNIQUE();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c267(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseprimary_columns() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseprimary_column();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseprimary_column_tail();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseprimary_column_tail();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c140(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseprimary_column() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsename_column();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolumn_collate();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseprimary_column_dir();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c269(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c268); }
      }

      return s0;
    }

    function peg$parsecolumn_collate() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCOLLATE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseid_collation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c6(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseprimary_column_dir() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseASC();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDESC();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c270(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseprimary_column_tail() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesym_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprimary_column();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c121(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseprimary_conflict() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseON();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCONFLICT();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestmt_fallback_types();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseo();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c271(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseconstraint_check() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseCHECK();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression_wrapped();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c272(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetable_constraint_foreign() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseforeign_start();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseloop_columns();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseforeign_clause();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c273(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseforeign_start() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseFOREIGN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseKEY();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c274(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseforeign_clause() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseforeign_references();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseforeign_actions();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseforeign_deferrable();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c275(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseforeign_references() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseREFERENCES();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseid_table();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseloop_columns();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c276(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseforeign_actions() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseforeign_action();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseforeign_actions_tail();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseforeign_actions_tail();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c277(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseforeign_actions_tail() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsee();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseforeign_action();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c278(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseforeign_action() {
      var s0;

      s0 = peg$parseforeign_action_on();
      if (s0 === peg$FAILED) {
        s0 = peg$parseforeign_action_match();
      }

      return s0;
    }

    function peg$parseforeign_action_on() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseON();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDELETE();
          if (s3 === peg$FAILED) {
            s3 = peg$parseUPDATE();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseaction_on_action();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c279(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseaction_on_action() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseSET();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNULL();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDEFAULT();
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseCASCADE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseRESTRICT();
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$parseNO();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsee();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseACTION();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c3;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c3;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c280(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseforeign_action_match() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseMATCH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c281(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseforeign_deferrable() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseNOT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsee();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDEFERRABLE();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsee();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseINITIALLY();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsee();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseDEFERRED();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseIMMEDIATE();
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c3;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c3;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c282(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetable_source_select() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseAS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestmt_select();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c283(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecreate_trigger() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parse_TODO_();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c284); }
      }

      return s0;
    }

    function peg$parsecreate_view() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parse_TODO_();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c285); }
      }

      return s0;
    }

    function peg$parsecreate_virtual() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parse_TODO_();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c286); }
      }

      return s0;
    }

    function peg$parsestmt_drop() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsedrop_start();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedrop_types();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedrop_ie();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseid_table();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseo();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c288(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c287); }
      }

      return s0;
    }

    function peg$parsedrop_start() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDROP();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c238(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsedrop_types() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTABLE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINDEX();
        if (s1 === peg$FAILED) {
          s1 = peg$parseTRIGGER();
          if (s1 === peg$FAILED) {
            s1 = peg$parseVIEW();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c199(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsedrop_ie() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsee();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEXISTS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsee();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c289(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsename_char() {
      var s0;

      if (peg$c290.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c291); }
      }

      return s0;
    }

    function peg$parsename_char_quoted() {
      var s0;

      if (peg$c292.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c293); }
      }

      return s0;
    }

    function peg$parsename() {
      var s0;

      s0 = peg$parsename_bracketed();
      if (s0 === peg$FAILED) {
        s0 = peg$parsename_backticked();
        if (s0 === peg$FAILED) {
          s0 = peg$parsename_dblquoted();
          if (s0 === peg$FAILED) {
            s0 = peg$parsename_unquoted();
          }
        }
      }

      return s0;
    }

    function peg$parsereserved_nodes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedatatype_types();
      if (s1 === peg$FAILED) {
        s1 = peg$parsereserved_words();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parsename_char();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c71;
        } else {
          peg$currPos = s2;
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsename_unquoted() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsereserved_nodes();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c71;
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsename_char();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsename_char();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c294(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsename_bracketed() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsesym_bopen();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsesym_bclose();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c71;
        } else {
          peg$currPos = s4;
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsename_char_quoted();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parsesym_bclose();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c71;
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsename_char_quoted();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c3;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseo();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesym_bclose();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c294(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsename_dblquoted() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c295;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c296); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 34) {
          s5 = peg$c295;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c296); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c71;
        } else {
          peg$currPos = s4;
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsename_char_quoted();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 34) {
              s5 = peg$c295;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c296); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c71;
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsename_char_quoted();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c3;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c295;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c296); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c294(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsename_backticked() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c297;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c298); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 96) {
          s5 = peg$c297;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c298); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c71;
        } else {
          peg$currPos = s4;
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsename_char_quoted();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 96) {
              s5 = peg$c297;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c298); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c71;
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsename_char_quoted();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c3;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 96) {
            s3 = peg$c297;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c298); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c294(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsesym_bopen() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c300;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c301); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c299); }
      }

      return s0;
    }

    function peg$parsesym_bclose() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 93) {
        s1 = peg$c303;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c304); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }

      return s0;
    }

    function peg$parsesym_popen() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c306;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c307); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c305); }
      }

      return s0;
    }

    function peg$parsesym_pclose() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 41) {
        s1 = peg$c309;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c310); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c308); }
      }

      return s0;
    }

    function peg$parsesym_comma() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c312;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c313); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c311); }
      }

      return s0;
    }

    function peg$parsesym_dot() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c315;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c316); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c314); }
      }

      return s0;
    }

    function peg$parsesym_star() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c318;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c319); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c317); }
      }

      return s0;
    }

    function peg$parsesym_quest() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c321;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c322); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c320); }
      }

      return s0;
    }

    function peg$parsesym_sglquote() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c324;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c325); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c323); }
      }

      return s0;
    }

    function peg$parsesym_dblquote() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c295;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c296); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }

      return s0;
    }

    function peg$parsesym_backtick() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c297;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c298); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c327); }
      }

      return s0;
    }

    function peg$parsesym_tilde() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 126) {
        s1 = peg$c329;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c330); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }

      return s0;
    }

    function peg$parsesym_plus() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c332;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c333); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c331); }
      }

      return s0;
    }

    function peg$parsesym_minus() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c335;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c336); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c334); }
      }

      return s0;
    }

    function peg$parsesym_equal() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c337;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c160); }
      }

      return s0;
    }

    function peg$parsesym_amp() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c340;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c341); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c339); }
      }

      return s0;
    }

    function peg$parsesym_pipe() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c343;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c344); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c342); }
      }

      return s0;
    }

    function peg$parsesym_mod() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c345;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c346); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }

      return s0;
    }

    function peg$parsesym_lt() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c347;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c348); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }

      return s0;
    }

    function peg$parsesym_gt() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c349;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c350); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }

      return s0;
    }

    function peg$parsesym_excl() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c352;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c353); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c351); }
      }

      return s0;
    }

    function peg$parsesym_semi() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c355;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c356); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c354); }
      }

      return s0;
    }

    function peg$parseABORT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c358) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c359); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c357); }
      }

      return s0;
    }

    function peg$parseACTION() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c361) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c362); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }

      return s0;
    }

    function peg$parseADD() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c364) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c365); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c363); }
      }

      return s0;
    }

    function peg$parseAFTER() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c367) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c368); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c366); }
      }

      return s0;
    }

    function peg$parseALL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c370) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c371); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c369); }
      }

      return s0;
    }

    function peg$parseALTER() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c373) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c374); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c372); }
      }

      return s0;
    }

    function peg$parseANALYZE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c376) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c377); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c375); }
      }

      return s0;
    }

    function peg$parseAND() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c379) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c380); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c378); }
      }

      return s0;
    }

    function peg$parseAS() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c382) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c383); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c381); }
      }

      return s0;
    }

    function peg$parseASC() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c385) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c386); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c384); }
      }

      return s0;
    }

    function peg$parseATTACH() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c388) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c389); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c387); }
      }

      return s0;
    }

    function peg$parseAUTOINCREMENT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c391) {
        s0 = input.substr(peg$currPos, 13);
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c392); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c390); }
      }

      return s0;
    }

    function peg$parseBEFORE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c394) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c395); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c393); }
      }

      return s0;
    }

    function peg$parseBEGIN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c397) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c398); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c396); }
      }

      return s0;
    }

    function peg$parseBETWEEN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c400) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c401); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c399); }
      }

      return s0;
    }

    function peg$parseBY() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c403) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c404); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }

      return s0;
    }

    function peg$parseCASCADE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c406) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c407); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c405); }
      }

      return s0;
    }

    function peg$parseCASE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c409) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c410); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c408); }
      }

      return s0;
    }

    function peg$parseCAST() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c412) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c413); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c411); }
      }

      return s0;
    }

    function peg$parseCHECK() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c415) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c416); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c414); }
      }

      return s0;
    }

    function peg$parseCOLLATE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c418) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c419); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c417); }
      }

      return s0;
    }

    function peg$parseCOLUMN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c421) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c422); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c420); }
      }

      return s0;
    }

    function peg$parseCOMMIT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c424) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c425); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c423); }
      }

      return s0;
    }

    function peg$parseCONFLICT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c427) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c428); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c426); }
      }

      return s0;
    }

    function peg$parseCONSTRAINT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c430) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c431); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c429); }
      }

      return s0;
    }

    function peg$parseCREATE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c433) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c434); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c432); }
      }

      return s0;
    }

    function peg$parseCROSS() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c436) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c437); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c435); }
      }

      return s0;
    }

    function peg$parseCURRENT_DATE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c439) {
        s0 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c440); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c438); }
      }

      return s0;
    }

    function peg$parseCURRENT_TIME() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c442) {
        s0 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c441); }
      }

      return s0;
    }

    function peg$parseCURRENT_TIMESTAMP() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 17).toLowerCase() === peg$c445) {
        s0 = input.substr(peg$currPos, 17);
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c446); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c444); }
      }

      return s0;
    }

    function peg$parseDATABASE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c448) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c449); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c447); }
      }

      return s0;
    }

    function peg$parseDEFAULT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c451) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c452); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c450); }
      }

      return s0;
    }

    function peg$parseDEFERRABLE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c454) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c455); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c453); }
      }

      return s0;
    }

    function peg$parseDEFERRED() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c457) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c458); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c456); }
      }

      return s0;
    }

    function peg$parseDELETE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c460) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c461); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c459); }
      }

      return s0;
    }

    function peg$parseDESC() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c463) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c464); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c462); }
      }

      return s0;
    }

    function peg$parseDETACH() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c466) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c467); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c465); }
      }

      return s0;
    }

    function peg$parseDISTINCT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c469) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c470); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c468); }
      }

      return s0;
    }

    function peg$parseDROP() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c472) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c473); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c471); }
      }

      return s0;
    }

    function peg$parseEACH() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c475) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c476); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c474); }
      }

      return s0;
    }

    function peg$parseELSE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c478) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c479); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c477); }
      }

      return s0;
    }

    function peg$parseEND() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c481) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c482); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c480); }
      }

      return s0;
    }

    function peg$parseESCAPE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c484) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c485); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c483); }
      }

      return s0;
    }

    function peg$parseEXCEPT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c487) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c488); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c486); }
      }

      return s0;
    }

    function peg$parseEXCLUSIVE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c490) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c491); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c489); }
      }

      return s0;
    }

    function peg$parseEXISTS() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c493) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c494); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c492); }
      }

      return s0;
    }

    function peg$parseEXPLAIN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c496) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c497); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c495); }
      }

      return s0;
    }

    function peg$parseFAIL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c499) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c500); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c498); }
      }

      return s0;
    }

    function peg$parseFOR() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c502) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c503); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c501); }
      }

      return s0;
    }

    function peg$parseFOREIGN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c505) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c506); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c504); }
      }

      return s0;
    }

    function peg$parseFROM() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c508) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c509); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c507); }
      }

      return s0;
    }

    function peg$parseFULL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c511) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c512); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c510); }
      }

      return s0;
    }

    function peg$parseGLOB() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c514) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c515); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c513); }
      }

      return s0;
    }

    function peg$parseGROUP() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c517) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c518); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c516); }
      }

      return s0;
    }

    function peg$parseHAVING() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c520) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c521); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c519); }
      }

      return s0;
    }

    function peg$parseIF() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c523) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c524); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c522); }
      }

      return s0;
    }

    function peg$parseIGNORE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c526) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c527); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c525); }
      }

      return s0;
    }

    function peg$parseIMMEDIATE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c529) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c530); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c528); }
      }

      return s0;
    }

    function peg$parseIN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c532) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c533); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c531); }
      }

      return s0;
    }

    function peg$parseINDEX() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c535) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c536); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c534); }
      }

      return s0;
    }

    function peg$parseINDEXED() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c538) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c539); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c537); }
      }

      return s0;
    }

    function peg$parseINITIALLY() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c541) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c542); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c540); }
      }

      return s0;
    }

    function peg$parseINNER() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c544) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c545); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c543); }
      }

      return s0;
    }

    function peg$parseINSERT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c547) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c548); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c546); }
      }

      return s0;
    }

    function peg$parseINSTEAD() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c550) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c551); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c549); }
      }

      return s0;
    }

    function peg$parseINTERSECT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c553) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c554); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c552); }
      }

      return s0;
    }

    function peg$parseINTO() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c556) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c557); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c555); }
      }

      return s0;
    }

    function peg$parseIS() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c559) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c560); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c558); }
      }

      return s0;
    }

    function peg$parseISNULL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c562) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c563); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c561); }
      }

      return s0;
    }

    function peg$parseJOIN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c565) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c566); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c564); }
      }

      return s0;
    }

    function peg$parseKEY() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c568) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c569); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c567); }
      }

      return s0;
    }

    function peg$parseLEFT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c571) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c572); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c570); }
      }

      return s0;
    }

    function peg$parseLIKE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c574) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c575); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c573); }
      }

      return s0;
    }

    function peg$parseLIMIT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c577) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c578); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c576); }
      }

      return s0;
    }

    function peg$parseMATCH() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c580) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c581); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c579); }
      }

      return s0;
    }

    function peg$parseNATURAL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c583) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c584); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c582); }
      }

      return s0;
    }

    function peg$parseNO() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c586) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c587); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c585); }
      }

      return s0;
    }

    function peg$parseNOT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c589) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c590); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c588); }
      }

      return s0;
    }

    function peg$parseNOTNULL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c592) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c593); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c591); }
      }

      return s0;
    }

    function peg$parseNULL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c595) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c596); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c594); }
      }

      return s0;
    }

    function peg$parseOF() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c598) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c599); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c597); }
      }

      return s0;
    }

    function peg$parseOFFSET() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c601) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c602); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c600); }
      }

      return s0;
    }

    function peg$parseON() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c604) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c605); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c603); }
      }

      return s0;
    }

    function peg$parseOR() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c607) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c608); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c606); }
      }

      return s0;
    }

    function peg$parseORDER() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c610) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c611); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c609); }
      }

      return s0;
    }

    function peg$parseOUTER() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c613) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c614); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c612); }
      }

      return s0;
    }

    function peg$parsePLAN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c616) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c617); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c615); }
      }

      return s0;
    }

    function peg$parsePRAGMA() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c619) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c620); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c618); }
      }

      return s0;
    }

    function peg$parsePRIMARY() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c622) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c623); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c621); }
      }

      return s0;
    }

    function peg$parseQUERY() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c625) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c626); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c624); }
      }

      return s0;
    }

    function peg$parseRAISE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c628) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c629); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c627); }
      }

      return s0;
    }

    function peg$parseRECURSIVE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c631) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c632); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c630); }
      }

      return s0;
    }

    function peg$parseREFERENCES() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c634) {
        s0 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c635); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c633); }
      }

      return s0;
    }

    function peg$parseREGEXP() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c637) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c638); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c636); }
      }

      return s0;
    }

    function peg$parseREINDEX() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c640) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c641); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c639); }
      }

      return s0;
    }

    function peg$parseRELEASE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c643) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c644); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c642); }
      }

      return s0;
    }

    function peg$parseRENAME() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c646) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c647); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c645); }
      }

      return s0;
    }

    function peg$parseREPLACE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c649) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c650); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c648); }
      }

      return s0;
    }

    function peg$parseRESTRICT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c652) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c653); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c651); }
      }

      return s0;
    }

    function peg$parseRIGHT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c655) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c656); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c654); }
      }

      return s0;
    }

    function peg$parseROLLBACK() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c658) {
        s0 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c659); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c657); }
      }

      return s0;
    }

    function peg$parseROW() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c661) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c662); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c660); }
      }

      return s0;
    }

    function peg$parseROWID() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c664) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c665); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c663); }
      }

      return s0;
    }

    function peg$parseSAVEPOINT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c667) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c668); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c666); }
      }

      return s0;
    }

    function peg$parseSELECT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c670) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c671); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c669); }
      }

      return s0;
    }

    function peg$parseSET() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c673) {
        s0 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c674); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c672); }
      }

      return s0;
    }

    function peg$parseTABLE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c676) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c677); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c675); }
      }

      return s0;
    }

    function peg$parseTEMP() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c679) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c680); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c678); }
      }

      return s0;
    }

    function peg$parseTEMPORARY() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c682) {
        s0 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c683); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c681); }
      }

      return s0;
    }

    function peg$parseTHEN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c685) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c686); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c684); }
      }

      return s0;
    }

    function peg$parseTO() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c688) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c689); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c687); }
      }

      return s0;
    }

    function peg$parseTRANSACTION() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c691) {
        s0 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c692); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c690); }
      }

      return s0;
    }

    function peg$parseTRIGGER() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c694) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c695); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c693); }
      }

      return s0;
    }

    function peg$parseUNION() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c697) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c698); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c696); }
      }

      return s0;
    }

    function peg$parseUNIQUE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c700) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c701); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c699); }
      }

      return s0;
    }

    function peg$parseUPDATE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c703) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c704); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c702); }
      }

      return s0;
    }

    function peg$parseUSING() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c706) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c707); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c705); }
      }

      return s0;
    }

    function peg$parseVACUUM() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c709) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c710); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c708); }
      }

      return s0;
    }

    function peg$parseVALUES() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c712) {
        s0 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c713); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c711); }
      }

      return s0;
    }

    function peg$parseVIEW() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c715) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c716); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c714); }
      }

      return s0;
    }

    function peg$parseVIRTUAL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c718) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c719); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c717); }
      }

      return s0;
    }

    function peg$parseWHEN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c721) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c722); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c720); }
      }

      return s0;
    }

    function peg$parseWHERE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c724) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c725); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c723); }
      }

      return s0;
    }

    function peg$parseWITH() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c727) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c728); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c726); }
      }

      return s0;
    }

    function peg$parseWITHOUT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c730) {
        s0 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c731); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c729); }
      }

      return s0;
    }

    function peg$parsereserved_words() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseABORT();
      if (s1 === peg$FAILED) {
        s1 = peg$parseACTION();
        if (s1 === peg$FAILED) {
          s1 = peg$parseADD();
          if (s1 === peg$FAILED) {
            s1 = peg$parseAFTER();
            if (s1 === peg$FAILED) {
              s1 = peg$parseALL();
              if (s1 === peg$FAILED) {
                s1 = peg$parseALTER();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseANALYZE();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseAND();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseAS();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseASC();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseATTACH();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseAUTOINCREMENT();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseBEFORE();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseBEGIN();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseBETWEEN();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseBY();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parseCASCADE();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseCASE();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parseCAST();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parseCHECK();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parseCOLLATE();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parseCOLUMN();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parseCOMMIT();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = peg$parseCONFLICT();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = peg$parseCONSTRAINT();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = peg$parseCREATE();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = peg$parseCROSS();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = peg$parseCURRENT_DATE();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = peg$parseCURRENT_TIME();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parseCURRENT_TIMESTAMP();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = peg$parseDATABASE();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = peg$parseDEFAULT();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = peg$parseDEFERRABLE();
                                                                      if (s1 === peg$FAILED) {
                                                                        s1 = peg$parseDEFERRED();
                                                                        if (s1 === peg$FAILED) {
                                                                          s1 = peg$parseDELETE();
                                                                          if (s1 === peg$FAILED) {
                                                                            s1 = peg$parseDESC();
                                                                            if (s1 === peg$FAILED) {
                                                                              s1 = peg$parseDETACH();
                                                                              if (s1 === peg$FAILED) {
                                                                                s1 = peg$parseDISTINCT();
                                                                                if (s1 === peg$FAILED) {
                                                                                  s1 = peg$parseDROP();
                                                                                  if (s1 === peg$FAILED) {
                                                                                    s1 = peg$parseEACH();
                                                                                    if (s1 === peg$FAILED) {
                                                                                      s1 = peg$parseELSE();
                                                                                      if (s1 === peg$FAILED) {
                                                                                        s1 = peg$parseEND();
                                                                                        if (s1 === peg$FAILED) {
                                                                                          s1 = peg$parseESCAPE();
                                                                                          if (s1 === peg$FAILED) {
                                                                                            s1 = peg$parseEXCEPT();
                                                                                            if (s1 === peg$FAILED) {
                                                                                              s1 = peg$parseEXCLUSIVE();
                                                                                              if (s1 === peg$FAILED) {
                                                                                                s1 = peg$parseEXISTS();
                                                                                                if (s1 === peg$FAILED) {
                                                                                                  s1 = peg$parseEXPLAIN();
                                                                                                  if (s1 === peg$FAILED) {
                                                                                                    s1 = peg$parseFAIL();
                                                                                                    if (s1 === peg$FAILED) {
                                                                                                      s1 = peg$parseFOR();
                                                                                                      if (s1 === peg$FAILED) {
                                                                                                        s1 = peg$parseFOREIGN();
                                                                                                        if (s1 === peg$FAILED) {
                                                                                                          s1 = peg$parseFROM();
                                                                                                          if (s1 === peg$FAILED) {
                                                                                                            s1 = peg$parseFULL();
                                                                                                            if (s1 === peg$FAILED) {
                                                                                                              s1 = peg$parseGLOB();
                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                s1 = peg$parseGROUP();
                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                  s1 = peg$parseHAVING();
                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                    s1 = peg$parseIF();
                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                      s1 = peg$parseIGNORE();
                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                        s1 = peg$parseIMMEDIATE();
                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                          s1 = peg$parseINDEX();
                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                            s1 = peg$parseINDEXED();
                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                              s1 = peg$parseINITIALLY();
                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                s1 = peg$parseINNER();
                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                  s1 = peg$parseINSERT();
                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                    s1 = peg$parseINSTEAD();
                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                      s1 = peg$parseINTERSECT();
                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                        s1 = peg$parseINTO();
                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                          s1 = peg$parseISNULL();
                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                            s1 = peg$parseJOIN();
                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                              s1 = peg$parseKEY();
                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                s1 = peg$parseLEFT();
                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                  s1 = peg$parseLIKE();
                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                    s1 = peg$parseLIMIT();
                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                      s1 = peg$parseMATCH();
                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                        s1 = peg$parseNATURAL();
                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                          s1 = peg$parseNO();
                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                            s1 = peg$parseNOT();
                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                              s1 = peg$parseNOTNULL();
                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                s1 = peg$parseNULL();
                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                  s1 = peg$parseOF();
                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                    s1 = peg$parseOFFSET();
                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                      s1 = peg$parseON();
                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                        s1 = peg$parseOR();
                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                          s1 = peg$parseORDER();
                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                            s1 = peg$parseOUTER();
                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                              s1 = peg$parsePLAN();
                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                s1 = peg$parsePRAGMA();
                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                  s1 = peg$parsePRIMARY();
                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                    s1 = peg$parseQUERY();
                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                      s1 = peg$parseRAISE();
                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                        s1 = peg$parseRECURSIVE();
                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                          s1 = peg$parseREFERENCES();
                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                            s1 = peg$parseREGEXP();
                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                              s1 = peg$parseREINDEX();
                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                s1 = peg$parseRELEASE();
                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                  s1 = peg$parseRENAME();
                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                    s1 = peg$parseREPLACE();
                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                      s1 = peg$parseRESTRICT();
                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                        s1 = peg$parseRIGHT();
                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                          s1 = peg$parseROLLBACK();
                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                            s1 = peg$parseROW();
                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                              s1 = peg$parseSAVEPOINT();
                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                s1 = peg$parseSELECT();
                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                  s1 = peg$parseSET();
                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                    s1 = peg$parseTABLE();
                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                      s1 = peg$parseTEMP();
                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                        s1 = peg$parseTEMPORARY();
                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                          s1 = peg$parseTHEN();
                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                            s1 = peg$parseTO();
                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                              s1 = peg$parseTRANSACTION();
                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                s1 = peg$parseTRIGGER();
                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                  s1 = peg$parseUNION();
                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                    s1 = peg$parseUNIQUE();
                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                      s1 = peg$parseUPDATE();
                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                        s1 = peg$parseUSING();
                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                          s1 = peg$parseVACUUM();
                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                            s1 = peg$parseVALUES();
                                                                                                                                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                              s1 = peg$parseVIEW();
                                                                                                                                                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                s1 = peg$parseVIRTUAL();
                                                                                                                                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                  s1 = peg$parseWHEN();
                                                                                                                                                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                    s1 = peg$parseWHERE();
                                                                                                                                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                      s1 = peg$parseWITH();
                                                                                                                                                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                        s1 = peg$parseWITHOUT();
                                                                                                                                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                          s1 = peg$parseIN();
                                                                                                                                                                                                                                                          if (s1 === peg$FAILED) {
                                                                                                                                                                                                                                                            s1 = peg$parseIS();
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c251(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseany() {
      var s0, s1;

      peg$silentFails++;
      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c733); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c732); }
      }

      return s0;
    }

    function peg$parseo() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      s1 = peg$parse_();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parse_();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c734); }
      }

      return s0;
    }

    function peg$parsee() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parse_();
        }
      } else {
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c735); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c737.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c738); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c736); }
      }

      return s0;
    }

    function peg$parse_TODO_() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c739) {
        s0 = peg$c739;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c740); }
      }

      return s0;
    }


          // Parser utilities
      var _ = require('./sql-parser-util');


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
