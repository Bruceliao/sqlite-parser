/*!
 * SQL Tree - Utility for navigating the SQL AST generated by the sqlQueryParser
 */
module.exports = (function (Promise, _, sqlQueryParser) {
  var Tree;

  Tree = function Tree(t) {
    return new Promise(function(acc, rej) {
      if (_.isString(tree)) {
        if(/^\s*\{.*\}\s*$/.test(tree)) {
          // JSON string
          tree = JSON.parse(tree);
        } else {
          // SQL string
          tree = sqlQueryParser(tree, true);
        }
      }
      acc(_.isEqual(_.keys(tree), ['statement']) ? tree['statement'] : tree);
    });
  };

  _.mixin(Tree, {
    'has': function has(thing) {
      return function(tree) {
        return any(thing) != tree;
      };
    },
    'any': function any(thing) {
      return function(tree) {
        return _.findWhere(tree, thing);
      };
    },
    'eachOf': function eachOf(things) {
      return function (tree) {
        if (!_.isArray(things)) {
          things = [things];
        }
        return _.all(_.map(things, function(thing) {
          return _.isString(thing) ? {'type': thing} : thing;
        }), function (thing) {
          return has(thing)(tree);
        });
      };
    },
    'anyOf': function anyOf(things) {
        return function (tree) {
          return _.any(matchable(things), function (thing) {
            return has(thing)(tree);
          });
        };
    },
    'clause': function clause(prop) {
      return function (tree) {
        return _.result(tree, prop);
      };
    },
    'statement': function statement(stmt) {
      return function (tree) {
        return any({
          'type': 'statement',
          'variant': stmt
        });
      };
    }
  });

  return Tree;
})(require('promise/lib/es6-extensions'), require('lodash'), require('./index'));
